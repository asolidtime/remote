
/home/maxwell/CTD-IoT/capstone/remoteymote/target/3.3.0/argon/remoteymote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b73d0  000b73d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b73f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e5dc  000b73f8  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  2003e648  2003e648  0002e648  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7464  000b7464  00027464  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b748c  000b748c  0002748c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00132abf  00000000  00000000  00027490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b79  00000000  00000000  00159f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002f90  00000000  00000000  0016dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00039b8a  00000000  00000000  00170a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0003ece1  00000000  00000000  001aa5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00147057  00000000  00000000  001e92c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003fc5b  00000000  00000000  0033031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b610  00000000  00000000  0036ff75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000087cc  00000000  00000000  0037b588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fdf1 	bl	b6c14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe13 	bl	b6c64 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5dc 	.word	0x2003e5dc
   b4048:	000b73f8 	.word	0x000b73f8
   b404c:	2003e648 	.word	0x2003e648
   b4050:	2003e648 	.word	0x2003e648
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f8a5 	bl	b51ac <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b73ac 	.word	0x000b73ac
   b407c:	000b73d0 	.word	0x000b73d0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f88b 	bl	b41a0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b845 	b.w	b511c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bced 	b.w	b4a70 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bceb 	b.w	b4a70 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bcf1 	b.w	b4a80 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
  // } else if (String(data[0]).equals("48")) {
  //   BLE.disconnect();
  // }

  // todo
}
   b40ae:	4770      	bx	lr

000b40b0 <setup>:
// setup() runs once, when the device is first turned on.
void setup() {
   b40b0:	b570      	push	{r4, r5, r6, lr}
   b40b2:	b090      	sub	sp, #64	; 0x40
  // Put initialization like pinMode and begin functions here.
  BLE.on();
   b40b4:	f001 fc5c 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40b8:	f001 fca4 	bl	b5a04 <_ZNK8particle14BleLocalDevice2onEv>

  BLE.addCharacteristic(txCharacteristic);
   b40bc:	f001 fc58 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40c0:	4a31      	ldr	r2, [pc, #196]	; (b4188 <setup+0xd8>)
   b40c2:	4d32      	ldr	r5, [pc, #200]	; (b418c <setup+0xdc>)
   b40c4:	4601      	mov	r1, r0
   b40c6:	a80b      	add	r0, sp, #44	; 0x2c
   b40c8:	f002 f974 	bl	b63b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40cc:	a80b      	add	r0, sp, #44	; 0x2c
   b40ce:	f001 fd3e 	bl	b5b4e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b40d2:	f001 fc4d 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40d6:	4a2e      	ldr	r2, [pc, #184]	; (b4190 <setup+0xe0>)
   b40d8:	4601      	mov	r1, r0
   b40da:	a80b      	add	r0, sp, #44	; 0x2c
   b40dc:	f002 f96a 	bl	b63b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40e0:	a80b      	add	r0, sp, #44	; 0x2c
   b40e2:	f001 fd34 	bl	b5b4e <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   b40e6:	a803      	add	r0, sp, #12
   b40e8:	f001 fe57 	bl	b5d9a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b40ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b40ee:	ac06      	add	r4, sp, #24
   b40f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b40f2:	682e      	ldr	r6, [r5, #0]
   b40f4:	6026      	str	r6, [r4, #0]
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b40f6:	ad06      	add	r5, sp, #24
   b40f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b40fa:	ac0b      	add	r4, sp, #44	; 0x2c
   b40fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b40fe:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4100:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4102:	f001 fa49 	bl	b5598 <_ZNK8particle7BleUuid4typeEv>
   b4106:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4108:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b410a:	2c00      	cmp	r4, #0
   b410c:	d134      	bne.n	b4178 <setup+0xc8>
            uint16_t uuid16 = tempUUID.shorted();
   b410e:	f001 fa5f 	bl	b55d0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4112:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4114:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4118:	2302      	movs	r3, #2
   b411a:	f10d 020a 	add.w	r2, sp, #10
   b411e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4120:	a803      	add	r0, sp, #12
   b4122:	f001 fe2f 	bl	b5d84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  data.appendLocalName("maximus");  //max 8 characters 
   b4126:	491b      	ldr	r1, [pc, #108]	; (b4194 <setup+0xe4>)
   b4128:	a803      	add	r0, sp, #12
   b412a:	f001 fe49 	bl	b5dc0 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
  BLE.advertise(&data);
   b412e:	f001 fc1f 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4132:	a903      	add	r1, sp, #12
   b4134:	2200      	movs	r2, #0
   b4136:	f001 fcb6 	bl	b5aa6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  uint8_t txBuf[20]; // an array of 10 bytes we can send
  txCharacteristic.setValue(txBuf, 20);  // here we are sending all 10 bytes
   b413a:	2300      	movs	r3, #0
   b413c:	2214      	movs	r2, #20
   b413e:	a90b      	add	r1, sp, #44	; 0x2c
   b4140:	4811      	ldr	r0, [pc, #68]	; (b4188 <setup+0xd8>)
   b4142:	f001 fb05 	bl	b5750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

  Wire.setSpeed(CLOCK_SPEED_400KHZ);
   b4146:	f002 fbd3 	bl	b68f0 <_Z19__fetch_global_Wirev>
   b414a:	4913      	ldr	r1, [pc, #76]	; (b4198 <setup+0xe8>)
   b414c:	f000 fe5c 	bl	b4e08 <_ZN7TwoWire8setSpeedEm>
  Wire.begin();
   b4150:	f002 fbce 	bl	b68f0 <_Z19__fetch_global_Wirev>
   b4154:	f000 fe5c 	bl	b4e10 <_ZN7TwoWire5beginEv>

  LIS3DHConfig config;
   b4158:	a806      	add	r0, sp, #24
   b415a:	f000 f99e 	bl	b449a <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_400_HZ);
   b415e:	2170      	movs	r1, #112	; 0x70
   b4160:	a806      	add	r0, sp, #24
   b4162:	f000 f9a7 	bl	b44b4 <_ZN12LIS3DHConfig12setAccelModeEh>

	bool setupSuccess = accel.setup(config);
   b4166:	a906      	add	r1, sp, #24
   b4168:	480c      	ldr	r0, [pc, #48]	; (b419c <setup+0xec>)
   b416a:	f000 f9f3 	bl	b4554 <_ZN6LIS3DH5setupER12LIS3DHConfig>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b416e:	9803      	ldr	r0, [sp, #12]
   b4170:	f000 fc86 	bl	b4a80 <free>
	//Serial.printlnf("setupSuccess=%d", setupSuccess);
  

}
   b4174:	b010      	add	sp, #64	; 0x40
   b4176:	bd70      	pop	{r4, r5, r6, pc}
   b4178:	f001 fa2c 	bl	b55d4 <_ZNK8particle7BleUuid8rawBytesEv>
   b417c:	2300      	movs	r3, #0
   b417e:	9300      	str	r3, [sp, #0]
   b4180:	4602      	mov	r2, r0
   b4182:	2310      	movs	r3, #16
   b4184:	2107      	movs	r1, #7
   b4186:	e7cb      	b.n	b4120 <setup+0x70>
   b4188:	2003e6b0 	.word	0x2003e6b0
   b418c:	2003e654 	.word	0x2003e654
   b4190:	2003e6a8 	.word	0x2003e6a8
   b4194:	000b6e24 	.word	0x000b6e24
   b4198:	00061a80 	.word	0x00061a80
   b419c:	2003e690 	.word	0x2003e690

000b41a0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b41a0:	b510      	push	{r4, lr}
  // The core of your code will likely live here.

  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   b41a2:	4c38      	ldr	r4, [pc, #224]	; (b4284 <loop+0xe4>)
void loop() {
   b41a4:	b0a0      	sub	sp, #128	; 0x80

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a6:	f000 fba7 	bl	b48f8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	1ac0      	subs	r0, r0, r3
   b41ae:	2863      	cmp	r0, #99	; 0x63
   b41b0:	d966      	bls.n	b4280 <loop+0xe0>
   b41b2:	f000 fba1 	bl	b48f8 <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		LIS3DHSample sample;
		if (accel.getSample(sample) && BLE.connected()) {
   b41b6:	a901      	add	r1, sp, #4
		lastPrintSample = millis();
   b41b8:	6020      	str	r0, [r4, #0]
		if (accel.getSample(sample) && BLE.connected()) {
   b41ba:	4833      	ldr	r0, [pc, #204]	; (b4288 <loop+0xe8>)
   b41bc:	f000 f99f 	bl	b44fe <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b41c0:	2800      	cmp	r0, #0
   b41c2:	d05d      	beq.n	b4280 <loop+0xe0>
   b41c4:	f001 fbd4 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41c8:	f001 fc2c 	bl	b5a24 <_ZNK8particle14BleLocalDevice9connectedEv>
   b41cc:	2800      	cmp	r0, #0
   b41ce:	d057      	beq.n	b4280 <loop+0xe0>
			//Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);

      uint8_t txBuf[UART_TX_BUF_SIZE];
      String message = String(sample.x) + String(" ") + String(sample.y) + String(" ") + String(sample.z);
   b41d0:	220a      	movs	r2, #10
   b41d2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b41d6:	a80b      	add	r0, sp, #44	; 0x2c
   b41d8:	f002 fa87 	bl	b66ea <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41dc:	a90b      	add	r1, sp, #44	; 0x2c
   b41de:	a807      	add	r0, sp, #28
   b41e0:	f002 fa66 	bl	b66b0 <_ZN6StringC1ERKS_>
   b41e4:	4929      	ldr	r1, [pc, #164]	; (b428c <loop+0xec>)
   b41e6:	a80f      	add	r0, sp, #60	; 0x3c
   b41e8:	f002 fa3f 	bl	b666a <_ZN6StringC1EPK19__FlashStringHelper>
   b41ec:	a90f      	add	r1, sp, #60	; 0x3c
   b41ee:	a807      	add	r0, sp, #28
   b41f0:	f002 faa5 	bl	b673e <_ZplRK15StringSumHelperRK6String>
   b41f4:	220a      	movs	r2, #10
   b41f6:	4604      	mov	r4, r0
   b41f8:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   b41fc:	a813      	add	r0, sp, #76	; 0x4c
   b41fe:	f002 fa74 	bl	b66ea <_ZN6StringC1Eih>
   b4202:	a913      	add	r1, sp, #76	; 0x4c
   b4204:	4620      	mov	r0, r4
   b4206:	f002 fa9a 	bl	b673e <_ZplRK15StringSumHelperRK6String>
   b420a:	4920      	ldr	r1, [pc, #128]	; (b428c <loop+0xec>)
   b420c:	4604      	mov	r4, r0
   b420e:	a817      	add	r0, sp, #92	; 0x5c
   b4210:	f002 fa2b 	bl	b666a <_ZN6StringC1EPK19__FlashStringHelper>
   b4214:	a917      	add	r1, sp, #92	; 0x5c
   b4216:	4620      	mov	r0, r4
   b4218:	f002 fa91 	bl	b673e <_ZplRK15StringSumHelperRK6String>
   b421c:	220a      	movs	r2, #10
   b421e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
   b4222:	4604      	mov	r4, r0
   b4224:	a81b      	add	r0, sp, #108	; 0x6c
   b4226:	f002 fa60 	bl	b66ea <_ZN6StringC1Eih>
   b422a:	a91b      	add	r1, sp, #108	; 0x6c
   b422c:	4620      	mov	r0, r4
   b422e:	f002 fa86 	bl	b673e <_ZplRK15StringSumHelperRK6String>
   b4232:	4601      	mov	r1, r0
   b4234:	a803      	add	r0, sp, #12
   b4236:	f002 fa3b 	bl	b66b0 <_ZN6StringC1ERKS_>
   b423a:	a81b      	add	r0, sp, #108	; 0x6c
   b423c:	f002 f9ca 	bl	b65d4 <_ZN6StringD1Ev>
   b4240:	a817      	add	r0, sp, #92	; 0x5c
   b4242:	f002 f9c7 	bl	b65d4 <_ZN6StringD1Ev>
   b4246:	a813      	add	r0, sp, #76	; 0x4c
   b4248:	f002 f9c4 	bl	b65d4 <_ZN6StringD1Ev>
   b424c:	a80f      	add	r0, sp, #60	; 0x3c
   b424e:	f002 f9c1 	bl	b65d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4252:	a807      	add	r0, sp, #28
   b4254:	f002 f9be 	bl	b65d4 <_ZN6StringD1Ev>
   b4258:	a80b      	add	r0, sp, #44	; 0x2c
   b425a:	f002 f9bb 	bl	b65d4 <_ZN6StringD1Ev>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b425e:	9a05      	ldr	r2, [sp, #20]
   b4260:	2300      	movs	r3, #0
   b4262:	3201      	adds	r2, #1
   b4264:	a91b      	add	r1, sp, #108	; 0x6c
   b4266:	a803      	add	r0, sp, #12
   b4268:	f002 fa75 	bl	b6756 <_ZNK6String8getBytesEPhjj>
      message.toCharArray((char *)txBuf, message.length() + 1);
      txCharacteristic.setValue(txBuf, message.length() + 1); 
   b426c:	9a05      	ldr	r2, [sp, #20]
   b426e:	4808      	ldr	r0, [pc, #32]	; (b4290 <loop+0xf0>)
   b4270:	2300      	movs	r3, #0
   b4272:	3201      	adds	r2, #1
   b4274:	a91b      	add	r1, sp, #108	; 0x6c
   b4276:	f001 fa6b 	bl	b5750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      String message = String(sample.x) + String(" ") + String(sample.y) + String(" ") + String(sample.z);
   b427a:	a803      	add	r0, sp, #12
   b427c:	f002 f9aa 	bl	b65d4 <_ZN6StringD1Ev>

		}
	}

   b4280:	b020      	add	sp, #128	; 0x80
   b4282:	bd10      	pop	{r4, pc}
   b4284:	2003e6a4 	.word	0x2003e6a4
   b4288:	2003e690 	.word	0x2003e690
   b428c:	000b6e2c 	.word	0x000b6e2c
   b4290:	2003e6b0 	.word	0x2003e6b0

000b4294 <_GLOBAL__sub_I_SystemMode>:
   b4294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
SYSTEM_THREAD(ENABLED);
   b4298:	2100      	movs	r1, #0
   b429a:	b098      	sub	sp, #96	; 0x60
SYSTEM_THREAD(ENABLED);
   b429c:	2001      	movs	r0, #1
   b429e:	f000 fbcb 	bl	b4a38 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b42a2:	4b40      	ldr	r3, [pc, #256]	; (b43a4 <_GLOBAL__sub_I_SystemMode+0x110>)
    SleepResult() {}
   b42a4:	4a40      	ldr	r2, [pc, #256]	; (b43a8 <_GLOBAL__sub_I_SystemMode+0x114>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b42a6:	4d41      	ldr	r5, [pc, #260]	; (b43ac <_GLOBAL__sub_I_SystemMode+0x118>)
   b42a8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b42aa:	2400      	movs	r4, #0
   b42ac:	e9c3 4400 	strd	r4, r4, [r3]
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b42b0:	4f3f      	ldr	r7, [pc, #252]	; (b43b0 <_GLOBAL__sub_I_SystemMode+0x11c>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b42b2:	4e40      	ldr	r6, [pc, #256]	; (b43b4 <_GLOBAL__sub_I_SystemMode+0x120>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b42b4:	2003      	movs	r0, #3
   b42b6:	f000 fbaf 	bl	b4a18 <set_system_mode>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b42ba:	493f      	ldr	r1, [pc, #252]	; (b43b8 <_GLOBAL__sub_I_SystemMode+0x124>)
   b42bc:	4628      	mov	r0, r5
   b42be:	f001 fa09 	bl	b56d4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b42c2:	493e      	ldr	r1, [pc, #248]	; (b43bc <_GLOBAL__sub_I_SystemMode+0x128>)
   b42c4:	4638      	mov	r0, r7
   b42c6:	f001 fa05 	bl	b56d4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b42ca:	493d      	ldr	r1, [pc, #244]	; (b43c0 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b42cc:	4630      	mov	r0, r6
   b42ce:	f001 fa01 	bl	b56d4 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b42d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b42d4:	f10d 0c10 	add.w	ip, sp, #16
   b42d8:	46a8      	mov	r8, r5
   b42da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b42de:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b42e2:	f8d6 a000 	ldr.w	sl, [r6]
   b42e6:	f8cc a000 	str.w	sl, [ip]
   b42ea:	ae09      	add	r6, sp, #36	; 0x24
   b42ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b42ee:	f10d 0c10 	add.w	ip, sp, #16
   b42f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b42f6:	f8d8 9000 	ldr.w	r9, [r8]
   b42fa:	f8c6 9000 	str.w	r9, [r6]
   b42fe:	ae0e      	add	r6, sp, #56	; 0x38
   b4300:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4302:	f8df e0d0 	ldr.w	lr, [pc, #208]	; b43d4 <_GLOBAL__sub_I_SystemMode+0x140>
   b4306:	f8c6 a000 	str.w	sl, [r6]
        BleUuid sUuid(svcUuid);
   b430a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b430e:	e9ce 4400 	strd	r4, r4, [lr]
   b4312:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4316:	ae13      	add	r6, sp, #76	; 0x4c
   b4318:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b431a:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b431e:	ae13      	add	r6, sp, #76	; 0x4c
   b4320:	ab0e      	add	r3, sp, #56	; 0x38
   b4322:	4670      	mov	r0, lr
   b4324:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4328:	4926      	ldr	r1, [pc, #152]	; (b43c4 <_GLOBAL__sub_I_SystemMode+0x130>)
   b432a:	9600      	str	r6, [sp, #0]
   b432c:	f04f 0210 	mov.w	r2, #16
   b4330:	f001 ff16 	bl	b6160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4334:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4336:	f10d 0c10 	add.w	ip, sp, #16
   b433a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b433e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4340:	f8d7 e000 	ldr.w	lr, [r7]
   b4344:	f8d8 8000 	ldr.w	r8, [r8]
   b4348:	f8cc e000 	str.w	lr, [ip]
   b434c:	af09      	add	r7, sp, #36	; 0x24
   b434e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4350:	f8c7 8000 	str.w	r8, [r7]
        BleUuid cUuid(charUuid);
   b4354:	af04      	add	r7, sp, #16
   b4356:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4358:	ad0e      	add	r5, sp, #56	; 0x38
   b435a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b435c:	f8df c078 	ldr.w	ip, [pc, #120]	; b43d8 <_GLOBAL__sub_I_SystemMode+0x144>
   b4360:	f8c5 e000 	str.w	lr, [r5]
        BleUuid sUuid(svcUuid);
   b4364:	af09      	add	r7, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4366:	e9cc 4400 	strd	r4, r4, [ip]
   b436a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b436c:	4635      	mov	r5, r6
   b436e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4370:	4b15      	ldr	r3, [pc, #84]	; (b43c8 <_GLOBAL__sub_I_SystemMode+0x134>)
        BleUuid sUuid(svcUuid);
   b4372:	f8c5 8000 	str.w	r8, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4376:	4915      	ldr	r1, [pc, #84]	; (b43cc <_GLOBAL__sub_I_SystemMode+0x138>)
   b4378:	9402      	str	r4, [sp, #8]
   b437a:	e9cd 6300 	strd	r6, r3, [sp]
   b437e:	f04f 0204 	mov.w	r2, #4
   b4382:	ab0e      	add	r3, sp, #56	; 0x38
   b4384:	4660      	mov	r0, ip
   b4386:	f001 feeb 	bl	b6160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
LIS3DHI2C accel(Wire);
   b438a:	f002 fab1 	bl	b68f0 <_Z19__fetch_global_Wirev>
   b438e:	4601      	mov	r1, r0
   b4390:	480f      	ldr	r0, [pc, #60]	; (b43d0 <_GLOBAL__sub_I_SystemMode+0x13c>)
   b4392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4396:	4622      	mov	r2, r4
   b4398:	b018      	add	sp, #96	; 0x60
   b439a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
LIS3DHI2C accel(Wire);
   b439e:	f000 b935 	b.w	b460c <_ZN9LIS3DHI2CC1ER7TwoWirehi>
   b43a2:	bf00      	nop
   b43a4:	2003e648 	.word	0x2003e648
   b43a8:	ffff0000 	.word	0xffff0000
   b43ac:	2003e654 	.word	0x2003e654
   b43b0:	2003e668 	.word	0x2003e668
   b43b4:	2003e67c 	.word	0x2003e67c
   b43b8:	000b6e2e 	.word	0x000b6e2e
   b43bc:	000b6e53 	.word	0x000b6e53
   b43c0:	000b6e78 	.word	0x000b6e78
   b43c4:	000b6e9d 	.word	0x000b6e9d
   b43c8:	000b40af 	.word	0x000b40af
   b43cc:	000b6ea0 	.word	0x000b6ea0
   b43d0:	2003e690 	.word	0x2003e690
   b43d4:	2003e6b0 	.word	0x2003e6b0
   b43d8:	2003e6a8 	.word	0x2003e6a8

000b43dc <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
   b43dc:	4770      	bx	lr

000b43de <_ZN9LIS3DHI2CD0Ev>:
LIS3DHI2C::~LIS3DHI2C() {
   b43de:	b510      	push	{r4, lr}
}
   b43e0:	2114      	movs	r1, #20
LIS3DHI2C::~LIS3DHI2C() {
   b43e2:	4604      	mov	r4, r0
}
   b43e4:	f7ff fe59 	bl	b409a <_ZdlPvj>
   b43e8:	4620      	mov	r0, r4
   b43ea:	bd10      	pop	{r4, pc}

000b43ec <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b43ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43ee:	460e      	mov	r6, r1

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
   b43f0:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b43f2:	4607      	mov	r7, r0
	wire.beginTransmission(getI2CAddr());
   b43f4:	f041 0118 	orr.w	r1, r1, #24
   b43f8:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b43fa:	461d      	mov	r5, r3
   b43fc:	4614      	mov	r4, r2
	wire.beginTransmission(getI2CAddr());
   b43fe:	f000 fd39 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   b4402:	68f8      	ldr	r0, [r7, #12]
	if (numBytes > 1) {
   b4404:	2d01      	cmp	r5, #1
	wire.write(addr);
   b4406:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   b4408:	bf88      	it	hi
   b440a:	f046 0680 	orrhi.w	r6, r6, #128	; 0x80
	wire.write(addr);
   b440e:	689b      	ldr	r3, [r3, #8]
   b4410:	4631      	mov	r1, r6
   b4412:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   b4414:	4425      	add	r5, r4
   b4416:	42ac      	cmp	r4, r5
		wire.write(buf[ii]);
   b4418:	68f8      	ldr	r0, [r7, #12]
	for(size_t ii = 0; ii < numBytes; ii++) {
   b441a:	d005      	beq.n	b4428 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
   b441c:	6803      	ldr	r3, [r0, #0]
   b441e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4422:	689b      	ldr	r3, [r3, #8]
   b4424:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   b4426:	e7f6      	b.n	b4416 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
	uint8_t res = wire.endTransmission();
   b4428:	f000 fd2c 	bl	b4e84 <_ZN7TwoWire15endTransmissionEv>
}
   b442c:	fab0 f080 	clz	r0, r0
   b4430:	0940      	lsrs	r0, r0, #5
   b4432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4434 <_ZN9LIS3DHI2C8readDataEhPhj>:
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b4434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4436:	460f      	mov	r7, r1
	uint8_t addr = (0b0011000 | sad0);
   b4438:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b443a:	4604      	mov	r4, r0
	wire.beginTransmission(getI2CAddr());
   b443c:	f041 0118 	orr.w	r1, r1, #24
   b4440:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b4442:	461e      	mov	r6, r3
   b4444:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
   b4446:	f000 fd15 	bl	b4e74 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   b444a:	68e0      	ldr	r0, [r4, #12]
	if (numBytes > 1) {
   b444c:	2e01      	cmp	r6, #1
	wire.write(addr);
   b444e:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   b4450:	bf88      	it	hi
   b4452:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	wire.write(addr);
   b4456:	689b      	ldr	r3, [r3, #8]
   b4458:	4639      	mov	r1, r7
   b445a:	4798      	blx	r3
	uint8_t res = wire.endTransmission();
   b445c:	68e0      	ldr	r0, [r4, #12]
   b445e:	f000 fd11 	bl	b4e84 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
   b4462:	b9c0      	cbnz	r0, b4496 <_ZN9LIS3DHI2C8readDataEhPhj+0x62>
	uint8_t addr = (0b0011000 | sad0);
   b4464:	7c21      	ldrb	r1, [r4, #16]
	wire.requestFrom(getI2CAddr(), numBytes);
   b4466:	68e0      	ldr	r0, [r4, #12]
   b4468:	4632      	mov	r2, r6
   b446a:	f041 0118 	orr.w	r1, r1, #24
   b446e:	f000 fcfe 	bl	b4e6e <_ZN7TwoWire11requestFromEhj>
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b4472:	442e      	add	r6, r5
   b4474:	42b5      	cmp	r5, r6
   b4476:	d101      	bne.n	b447c <_ZN9LIS3DHI2C8readDataEhPhj+0x48>
	return true;
   b4478:	2001      	movs	r0, #1
}
   b447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b447c:	68e0      	ldr	r0, [r4, #12]
   b447e:	6803      	ldr	r3, [r0, #0]
   b4480:	691b      	ldr	r3, [r3, #16]
   b4482:	4798      	blx	r3
   b4484:	2800      	cmp	r0, #0
   b4486:	d0f7      	beq.n	b4478 <_ZN9LIS3DHI2C8readDataEhPhj+0x44>
		buf[ii] = wire.read();
   b4488:	68e0      	ldr	r0, [r4, #12]
   b448a:	6803      	ldr	r3, [r0, #0]
   b448c:	695b      	ldr	r3, [r3, #20]
   b448e:	4798      	blx	r3
   b4490:	f805 0b01 	strb.w	r0, [r5], #1
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   b4494:	e7ee      	b.n	b4474 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
		return false;
   b4496:	2000      	movs	r0, #0
   b4498:	e7ef      	b.n	b447a <_ZN9LIS3DHI2C8readDataEhPhj+0x46>

000b449a <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b449a:	2200      	movs	r2, #0
   b449c:	7002      	strb	r2, [r0, #0]
   b449e:	7042      	strb	r2, [r0, #1]
   b44a0:	7082      	strb	r2, [r0, #2]
   b44a2:	70c2      	strb	r2, [r0, #3]
   b44a4:	7102      	strb	r2, [r0, #4]
   b44a6:	7142      	strb	r2, [r0, #5]
   b44a8:	7182      	strb	r2, [r0, #6]
   b44aa:	71c2      	strb	r2, [r0, #7]
   b44ac:	7202      	strb	r2, [r0, #8]
   b44ae:	7242      	strb	r2, [r0, #9]
   b44b0:	7282      	strb	r2, [r0, #10]
}
   b44b2:	4770      	bx	lr

000b44b4 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b44b4:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b44b6:	f041 0107 	orr.w	r1, r1, #7
   b44ba:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b44bc:	7102      	strb	r2, [r0, #4]
   b44be:	7082      	strb	r2, [r0, #2]
   b44c0:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b44c2:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b44c4:	7242      	strb	r2, [r0, #9]
}
   b44c6:	4770      	bx	lr

000b44c8 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b44c8:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b44ca:	6803      	ldr	r3, [r0, #0]
   b44cc:	aa01      	add	r2, sp, #4
   b44ce:	68dc      	ldr	r4, [r3, #12]
   b44d0:	2301      	movs	r3, #1
   b44d2:	47a0      	blx	r4
}
   b44d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b44d8:	b002      	add	sp, #8
   b44da:	bd10      	pop	{r4, pc}

000b44dc <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b44dc:	b538      	push	{r3, r4, r5, lr}
   b44de:	4605      	mov	r5, r0
   b44e0:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b44e2:	210f      	movs	r1, #15
   b44e4:	4628      	mov	r0, r5
   b44e6:	f7ff ffef 	bl	b44c8 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b44ea:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b44ec:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b44f0:	d004      	beq.n	b44fc <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b44f2:	f000 fdee 	bl	b50d2 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b44f6:	3c01      	subs	r4, #1
   b44f8:	d1f3      	bne.n	b44e2 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b44fa:	4620      	mov	r0, r4
}
   b44fc:	bd38      	pop	{r3, r4, r5, pc}

000b44fe <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b44fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4500:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b4502:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b4504:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b4506:	f7ff ffdf 	bl	b44c8 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b450a:	f000 0008 	and.w	r0, r0, #8
   b450e:	2800      	cmp	r0, #0
   b4510:	bf14      	ite	ne
   b4512:	2601      	movne	r6, #1
   b4514:	2600      	moveq	r6, #0
	if (hasData) {
   b4516:	d00f      	beq.n	b4538 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b4518:	682b      	ldr	r3, [r5, #0]
   b451a:	466a      	mov	r2, sp
   b451c:	68df      	ldr	r7, [r3, #12]
   b451e:	2128      	movs	r1, #40	; 0x28
   b4520:	2306      	movs	r3, #6
   b4522:	4628      	mov	r0, r5
   b4524:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b4526:	f8bd 3000 	ldrh.w	r3, [sp]
   b452a:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b452c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b4530:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b4532:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4536:	80a3      	strh	r3, [r4, #4]
}
   b4538:	4630      	mov	r0, r6
   b453a:	b003      	add	sp, #12
   b453c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b453e <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b453e:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b4540:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b4542:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b4546:	691c      	ldr	r4, [r3, #16]
   b4548:	aa01      	add	r2, sp, #4
   b454a:	2301      	movs	r3, #1
   b454c:	47a0      	blx	r4
}
   b454e:	b002      	add	sp, #8
   b4550:	bd10      	pop	{r4, pc}
	...

000b4554 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b4554:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b4556:	6803      	ldr	r3, [r0, #0]
   b4558:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b455a:	4604      	mov	r4, r0
   b455c:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b455e:	4798      	blx	r3
   b4560:	4606      	mov	r6, r0
   b4562:	b930      	cbnz	r0, b4572 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b4564:	f000 fcfc 	bl	b4f60 <_Z16_fetch_usbserialv>
   b4568:	4927      	ldr	r1, [pc, #156]	; (b4608 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b456a:	f000 fea0 	bl	b52ae <_ZN5Print7printlnEPKc>
}
   b456e:	4630      	mov	r0, r6
   b4570:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b4572:	782a      	ldrb	r2, [r5, #0]
   b4574:	2120      	movs	r1, #32
   b4576:	4620      	mov	r0, r4
   b4578:	f7ff ffe1 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b457c:	786a      	ldrb	r2, [r5, #1]
   b457e:	2121      	movs	r1, #33	; 0x21
   b4580:	4620      	mov	r0, r4
   b4582:	f7ff ffdc 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b4586:	78aa      	ldrb	r2, [r5, #2]
   b4588:	2122      	movs	r1, #34	; 0x22
   b458a:	4620      	mov	r0, r4
   b458c:	f7ff ffd7 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b4590:	78ea      	ldrb	r2, [r5, #3]
   b4592:	2123      	movs	r1, #35	; 0x23
   b4594:	4620      	mov	r0, r4
   b4596:	f7ff ffd2 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b459a:	792a      	ldrb	r2, [r5, #4]
   b459c:	2124      	movs	r1, #36	; 0x24
   b459e:	4620      	mov	r0, r4
   b45a0:	f7ff ffcd 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b45a4:	796a      	ldrb	r2, [r5, #5]
   b45a6:	2125      	movs	r1, #37	; 0x25
   b45a8:	4620      	mov	r0, r4
   b45aa:	f7ff ffc8 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b45ae:	79ab      	ldrb	r3, [r5, #6]
   b45b0:	b11b      	cbz	r3, b45ba <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b45b2:	2126      	movs	r1, #38	; 0x26
   b45b4:	4620      	mov	r0, r4
   b45b6:	f7ff ff87 	bl	b44c8 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b45ba:	7aaa      	ldrb	r2, [r5, #10]
   b45bc:	212e      	movs	r1, #46	; 0x2e
   b45be:	4620      	mov	r0, r4
   b45c0:	f7ff ffbd 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b45c4:	78ab      	ldrb	r3, [r5, #2]
   b45c6:	065b      	lsls	r3, r3, #25
   b45c8:	d5d1      	bpl.n	b456e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b45ca:	79ea      	ldrb	r2, [r5, #7]
   b45cc:	2132      	movs	r1, #50	; 0x32
   b45ce:	4620      	mov	r0, r4
   b45d0:	f7ff ffb5 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b45d4:	7a2a      	ldrb	r2, [r5, #8]
   b45d6:	2133      	movs	r1, #51	; 0x33
   b45d8:	4620      	mov	r0, r4
   b45da:	f7ff ffb0 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b45de:	6863      	ldr	r3, [r4, #4]
   b45e0:	2b00      	cmp	r3, #0
   b45e2:	db0a      	blt.n	b45fa <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b45e4:	7a6a      	ldrb	r2, [r5, #9]
   b45e6:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b45e8:	4620      	mov	r0, r4
   b45ea:	2130      	movs	r1, #48	; 0x30
   b45ec:	f7ff ffa7 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b45f0:	2131      	movs	r1, #49	; 0x31
   b45f2:	4620      	mov	r0, r4
   b45f4:	f7ff ff68 	bl	b44c8 <_ZN6LIS3DH13readRegister8Eh>
   b45f8:	e7b9      	b.n	b456e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b45fa:	2200      	movs	r2, #0
   b45fc:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b45fe:	2130      	movs	r1, #48	; 0x30
   b4600:	4620      	mov	r0, r4
   b4602:	f7ff ff9c 	bl	b453e <_ZN6LIS3DH14writeRegister8Ehh>
   b4606:	e7b2      	b.n	b456e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b4608:	000b6ea3 	.word	0x000b6ea3

000b460c <_ZN9LIS3DHI2CC1ER7TwoWirehi>:
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   b460c:	b510      	push	{r4, lr}
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b460e:	6043      	str	r3, [r0, #4]
   b4610:	2300      	movs	r3, #0
   b4612:	7203      	strb	r3, [r0, #8]
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   b4614:	4b02      	ldr	r3, [pc, #8]	; (b4620 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x14>)
   b4616:	6003      	str	r3, [r0, #0]
   b4618:	60c1      	str	r1, [r0, #12]
   b461a:	7402      	strb	r2, [r0, #16]
}
   b461c:	bd10      	pop	{r4, pc}
   b461e:	bf00      	nop
   b4620:	000b6ebc 	.word	0x000b6ebc

000b4624 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <HAL_USB_USART_Init+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	681b      	ldr	r3, [r3, #0]
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003024c 	.word	0x0003024c

000b4634 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <HAL_USB_USART_Available_Data+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	691b      	ldr	r3, [r3, #16]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003024c 	.word	0x0003024c

000b4644 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003024c 	.word	0x0003024c

000b4654 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_USB_USART_Receive_Data+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	699b      	ldr	r3, [r3, #24]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003024c 	.word	0x0003024c

000b4664 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <HAL_USB_USART_Send_Data+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	69db      	ldr	r3, [r3, #28]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003024c 	.word	0x0003024c

000b4674 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <HAL_USB_USART_Flush_Data+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a1b      	ldr	r3, [r3, #32]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003024c 	.word	0x0003024c

000b4684 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_i2c_set_speed+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	681b      	ldr	r3, [r3, #0]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030228 	.word	0x00030228

000b4694 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_i2c_begin+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	68db      	ldr	r3, [r3, #12]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030228 	.word	0x00030228

000b46a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_i2c_begin_transmission+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	699b      	ldr	r3, [r3, #24]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030228 	.word	0x00030228

000b46b4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <hal_i2c_end_transmission+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	69db      	ldr	r3, [r3, #28]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030228 	.word	0x00030228

000b46c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_i2c_write+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6a1b      	ldr	r3, [r3, #32]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030228 	.word	0x00030228

000b46d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <hal_i2c_available+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030228 	.word	0x00030228

000b46e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <hal_i2c_read+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030228 	.word	0x00030228

000b46f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <hal_i2c_peek+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030228 	.word	0x00030228

000b4704 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_i2c_flush+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030228 	.word	0x00030228

000b4714 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <hal_i2c_init+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030228 	.word	0x00030228

000b4724 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <hal_i2c_request_ex+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030228 	.word	0x00030228

000b4734 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_usart_write+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	68db      	ldr	r3, [r3, #12]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003023c 	.word	0x0003023c

000b4744 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_usart_available+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	691b      	ldr	r3, [r3, #16]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003023c 	.word	0x0003023c

000b4754 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <hal_usart_read+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	695b      	ldr	r3, [r3, #20]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003023c 	.word	0x0003023c

000b4764 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <hal_usart_peek+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	699b      	ldr	r3, [r3, #24]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003023c 	.word	0x0003023c

000b4774 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <hal_usart_flush+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	69db      	ldr	r3, [r3, #28]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003023c 	.word	0x0003023c

000b4784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_usart_available_data_for_write+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003023c 	.word	0x0003023c

000b4794 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_usart_init_ex+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003023c 	.word	0x0003023c

000b47a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <inet_inet_ntop+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	695b      	ldr	r3, [r3, #20]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	00030264 	.word	0x00030264

000b47b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <os_mutex_recursive_create+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	00030248 	.word	0x00030248

000b47c4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <os_mutex_recursive_lock+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	00030248 	.word	0x00030248

000b47d4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <os_mutex_recursive_unlock+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	00030248 	.word	0x00030248

000b47e4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <hal_ble_stack_init+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	689b      	ldr	r3, [r3, #8]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030278 	.word	0x00030278

000b47f4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_ble_gap_set_advertising_data+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030278 	.word	0x00030278

000b4804 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_ble_gap_set_scan_response_data+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030278 	.word	0x00030278

000b4814 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_ble_gap_start_advertising+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030278 	.word	0x00030278

000b4824 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b03      	ldr	r3, [pc, #12]	; (b4834 <hal_ble_gap_disconnect+0x10>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b482e:	9301      	str	r3, [sp, #4]
   b4830:	bd08      	pop	{r3, pc}
   b4832:	0000      	.short	0x0000
   b4834:	00030278 	.word	0x00030278

000b4838 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b03      	ldr	r3, [pc, #12]	; (b4848 <hal_ble_gatt_server_add_service+0x10>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4842:	9301      	str	r3, [sp, #4]
   b4844:	bd08      	pop	{r3, pc}
   b4846:	0000      	.short	0x0000
   b4848:	00030278 	.word	0x00030278

000b484c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b03      	ldr	r3, [pc, #12]	; (b485c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4856:	9301      	str	r3, [sp, #4]
   b4858:	bd08      	pop	{r3, pc}
   b485a:	0000      	.short	0x0000
   b485c:	00030278 	.word	0x00030278

000b4860 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b03      	ldr	r3, [pc, #12]	; (b4870 <hal_ble_gatt_client_write_with_response+0x10>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b486a:	9301      	str	r3, [sp, #4]
   b486c:	bd08      	pop	{r3, pc}
   b486e:	0000      	.short	0x0000
   b4870:	00030278 	.word	0x00030278

000b4874 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b03      	ldr	r3, [pc, #12]	; (b4884 <hal_ble_gatt_client_write_without_response+0x10>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b487e:	9301      	str	r3, [sp, #4]
   b4880:	bd08      	pop	{r3, pc}
   b4882:	0000      	.short	0x0000
   b4884:	00030278 	.word	0x00030278

000b4888 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b03      	ldr	r3, [pc, #12]	; (b4898 <hal_ble_gatt_server_add_characteristic+0x10>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4892:	9301      	str	r3, [sp, #4]
   b4894:	bd08      	pop	{r3, pc}
   b4896:	0000      	.short	0x0000
   b4898:	00030278 	.word	0x00030278

000b489c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b03      	ldr	r3, [pc, #12]	; (b48ac <hal_ble_set_callback_on_periph_link_events+0x10>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b48a6:	9301      	str	r3, [sp, #4]
   b48a8:	bd08      	pop	{r3, pc}
   b48aa:	0000      	.short	0x0000
   b48ac:	00030278 	.word	0x00030278

000b48b0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b03      	ldr	r3, [pc, #12]	; (b48c0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b48ba:	9301      	str	r3, [sp, #4]
   b48bc:	bd08      	pop	{r3, pc}
   b48be:	0000      	.short	0x0000
   b48c0:	00030278 	.word	0x00030278

000b48c4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b03      	ldr	r3, [pc, #12]	; (b48d4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b48ce:	9301      	str	r3, [sp, #4]
   b48d0:	bd08      	pop	{r3, pc}
   b48d2:	0000      	.short	0x0000
   b48d4:	00030278 	.word	0x00030278

000b48d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <HAL_RNG_GetRandomNumber+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	685b      	ldr	r3, [r3, #4]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030218 	.word	0x00030218

000b48e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <HAL_Delay_Microseconds+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	68db      	ldr	r3, [r3, #12]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030218 	.word	0x00030218

000b48f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	695b      	ldr	r3, [r3, #20]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030218 	.word	0x00030218

000b4908 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <netdb_freeaddrinfo+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	689b      	ldr	r3, [r3, #8]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030268 	.word	0x00030268

000b4918 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <netdb_getaddrinfo+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	68db      	ldr	r3, [r3, #12]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030268 	.word	0x00030268

000b4928 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <panic_+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030260 	.word	0x00030260

000b4938 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <log_message+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030260 	.word	0x00030260

000b4948 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <spark_set_random_seed_from_cloud_handler+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030244 	.word	0x00030244

000b4958 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <network_connect+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	685b      	ldr	r3, [r3, #4]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030240 	.word	0x00030240

000b4968 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <network_connecting+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	689b      	ldr	r3, [r3, #8]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030240 	.word	0x00030240

000b4978 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <network_disconnect+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	68db      	ldr	r3, [r3, #12]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030240 	.word	0x00030240

000b4988 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <network_ready+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	691b      	ldr	r3, [r3, #16]
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030240 	.word	0x00030240

000b4998 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <network_on+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	695b      	ldr	r3, [r3, #20]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030240 	.word	0x00030240

000b49a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <network_off+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	699b      	ldr	r3, [r3, #24]
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030240 	.word	0x00030240

000b49b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <network_listen+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	69db      	ldr	r3, [r3, #28]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030240 	.word	0x00030240

000b49c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <network_listening+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6a1b      	ldr	r3, [r3, #32]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030240 	.word	0x00030240

000b49d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <network_set_listen_timeout+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030240 	.word	0x00030240

000b49e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <network_get_listen_timeout+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030240 	.word	0x00030240

000b49f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <network_is_on+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030240 	.word	0x00030240

000b4a08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <network_is_off+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030240 	.word	0x00030240

000b4a18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <set_system_mode+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	685b      	ldr	r3, [r3, #4]
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030220 	.word	0x00030220

000b4a28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <system_delay_ms+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	695b      	ldr	r3, [r3, #20]
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030220 	.word	0x00030220

000b4a38 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <system_thread_set_state+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030220 	.word	0x00030220

000b4a48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b03      	ldr	r3, [pc, #12]	; (b4a58 <system_ctrl_set_app_request_handler+0x10>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4a52:	9301      	str	r3, [sp, #4]
   b4a54:	bd08      	pop	{r3, pc}
   b4a56:	0000      	.short	0x0000
   b4a58:	00030220 	.word	0x00030220

000b4a5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b03      	ldr	r3, [pc, #12]	; (b4a6c <system_ctrl_set_result+0x10>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a66:	9301      	str	r3, [sp, #4]
   b4a68:	bd08      	pop	{r3, pc}
   b4a6a:	0000      	.short	0x0000
   b4a6c:	00030220 	.word	0x00030220

000b4a70 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <malloc+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	681b      	ldr	r3, [r3, #0]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003021c 	.word	0x0003021c

000b4a80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <free+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	685b      	ldr	r3, [r3, #4]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	0003021c 	.word	0x0003021c

000b4a90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <realloc+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	689b      	ldr	r3, [r3, #8]
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	0003021c 	.word	0x0003021c

000b4aa0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <abort+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	0003021c 	.word	0x0003021c

000b4ab0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <__assert_func+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	0003021c 	.word	0x0003021c

000b4ac0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <newlib_impure_ptr_callback+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	0003021c 	.word	0x0003021c

000b4ad0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4ad0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4ad2:	6843      	ldr	r3, [r0, #4]
   b4ad4:	3b01      	subs	r3, #1
    {
   b4ad6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4ad8:	6043      	str	r3, [r0, #4]
   b4ada:	b963      	cbnz	r3, b4af6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4adc:	6803      	ldr	r3, [r0, #0]
   b4ade:	689b      	ldr	r3, [r3, #8]
   b4ae0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ae2:	68a3      	ldr	r3, [r4, #8]
   b4ae4:	3b01      	subs	r3, #1
   b4ae6:	60a3      	str	r3, [r4, #8]
   b4ae8:	b92b      	cbnz	r3, b4af6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4aea:	6823      	ldr	r3, [r4, #0]
   b4aec:	4620      	mov	r0, r4
   b4aee:	68db      	ldr	r3, [r3, #12]
    }
   b4af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4af4:	4718      	bx	r3
    }
   b4af6:	bd10      	pop	{r4, pc}

000b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4af8:	b510      	push	{r4, lr}
   b4afa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b4afc:	6800      	ldr	r0, [r0, #0]
   b4afe:	b108      	cbz	r0, b4b04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4b00:	f7ff ffe6 	bl	b4ad0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4b04:	4620      	mov	r0, r4
   b4b06:	bd10      	pop	{r4, pc}

000b4b08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4b08:	2300      	movs	r3, #0
   b4b0a:	6840      	ldr	r0, [r0, #4]
   b4b0c:	461a      	mov	r2, r3
   b4b0e:	f7ff bf23 	b.w	b4958 <network_connect>

000b4b12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4b12:	6840      	ldr	r0, [r0, #4]
   b4b14:	2200      	movs	r2, #0
   b4b16:	2102      	movs	r1, #2
   b4b18:	f7ff bf2e 	b.w	b4978 <network_disconnect>

000b4b1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4b1c:	2200      	movs	r2, #0
   b4b1e:	6840      	ldr	r0, [r0, #4]
   b4b20:	4611      	mov	r1, r2
   b4b22:	f7ff bf21 	b.w	b4968 <network_connecting>

000b4b26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4b26:	2200      	movs	r2, #0
   b4b28:	6840      	ldr	r0, [r0, #4]
   b4b2a:	4611      	mov	r1, r2
   b4b2c:	f7ff bf2c 	b.w	b4988 <network_ready>

000b4b30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4b30:	2300      	movs	r3, #0
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	461a      	mov	r2, r3
   b4b36:	4619      	mov	r1, r3
   b4b38:	f7ff bf2e 	b.w	b4998 <network_on>

000b4b3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4b3c:	2300      	movs	r3, #0
   b4b3e:	6840      	ldr	r0, [r0, #4]
   b4b40:	461a      	mov	r2, r3
   b4b42:	4619      	mov	r1, r3
   b4b44:	f7ff bf30 	b.w	b49a8 <network_off>

000b4b48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4b48:	6840      	ldr	r0, [r0, #4]
   b4b4a:	2100      	movs	r1, #0
   b4b4c:	f7ff bf54 	b.w	b49f8 <network_is_on>

000b4b50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4b50:	6840      	ldr	r0, [r0, #4]
   b4b52:	2100      	movs	r1, #0
   b4b54:	f7ff bf58 	b.w	b4a08 <network_is_off>

000b4b58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4b58:	6840      	ldr	r0, [r0, #4]
   b4b5a:	2200      	movs	r2, #0
   b4b5c:	f081 0101 	eor.w	r1, r1, #1
   b4b60:	f7ff bf2a 	b.w	b49b8 <network_listen>

000b4b64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4b64:	6840      	ldr	r0, [r0, #4]
   b4b66:	2200      	movs	r2, #0
   b4b68:	f7ff bf36 	b.w	b49d8 <network_set_listen_timeout>

000b4b6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4b6c:	2200      	movs	r2, #0
   b4b6e:	6840      	ldr	r0, [r0, #4]
   b4b70:	4611      	mov	r1, r2
   b4b72:	f7ff bf39 	b.w	b49e8 <network_get_listen_timeout>

000b4b76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4b76:	2200      	movs	r2, #0
   b4b78:	6840      	ldr	r0, [r0, #4]
   b4b7a:	4611      	mov	r1, r2
   b4b7c:	f7ff bf24 	b.w	b49c8 <network_listening>

000b4b80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4b84:	b095      	sub	sp, #84	; 0x54
   b4b86:	4614      	mov	r4, r2
   b4b88:	460d      	mov	r5, r1
   b4b8a:	4607      	mov	r7, r0
    IPAddress addr;
   b4b8c:	f000 fa48 	bl	b5020 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4b90:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4b92:	221c      	movs	r2, #28
   b4b94:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4b96:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4b98:	f002 f864 	bl	b6c64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4b9c:	2340      	movs	r3, #64	; 0x40
   b4b9e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	466b      	mov	r3, sp
   b4ba4:	aa0c      	add	r2, sp, #48	; 0x30
   b4ba6:	2100      	movs	r1, #0
   b4ba8:	f7ff feb6 	bl	b4918 <netdb_getaddrinfo>
    if (!r) {
   b4bac:	4604      	mov	r4, r0
   b4bae:	2800      	cmp	r0, #0
   b4bb0:	d14b      	bne.n	b4c4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4bb2:	4602      	mov	r2, r0
   b4bb4:	2101      	movs	r1, #1
   b4bb6:	6868      	ldr	r0, [r5, #4]
   b4bb8:	f7ff fee6 	bl	b4988 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4bbc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4bbe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4bc0:	4622      	mov	r2, r4
   b4bc2:	6868      	ldr	r0, [r5, #4]
   b4bc4:	f7ff fee0 	bl	b4988 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4bc8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4bca:	4681      	mov	r9, r0
        bool ok = false;
   b4bcc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4bce:	2e00      	cmp	r6, #0
   b4bd0:	d03b      	beq.n	b4c4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4bd2:	2900      	cmp	r1, #0
   b4bd4:	d139      	bne.n	b4c4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4bd6:	6873      	ldr	r3, [r6, #4]
   b4bd8:	2b02      	cmp	r3, #2
   b4bda:	d003      	beq.n	b4be4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4bdc:	2b0a      	cmp	r3, #10
   b4bde:	d011      	beq.n	b4c04 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4be0:	69f6      	ldr	r6, [r6, #28]
   b4be2:	e7f4      	b.n	b4bce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4be4:	f1b8 0f00 	cmp.w	r8, #0
   b4be8:	d0fa      	beq.n	b4be0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4bea:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4bec:	a806      	add	r0, sp, #24
   b4bee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4bf0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4bf2:	f000 fa43 	bl	b507c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4bf8:	1d3c      	adds	r4, r7, #4
   b4bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bfc:	682b      	ldr	r3, [r5, #0]
   b4bfe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4c00:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4c02:	e7ed      	b.n	b4be0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4c04:	f1b9 0f00 	cmp.w	r9, #0
   b4c08:	d0ea      	beq.n	b4be0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4c0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4c0c:	2210      	movs	r2, #16
   b4c0e:	a801      	add	r0, sp, #4
   b4c10:	f002 f828 	bl	b6c64 <memset>
                    a.v = 6;
   b4c14:	2306      	movs	r3, #6
   b4c16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4c1a:	ad01      	add	r5, sp, #4
   b4c1c:	f104 0308 	add.w	r3, r4, #8
   b4c20:	3418      	adds	r4, #24
   b4c22:	6818      	ldr	r0, [r3, #0]
   b4c24:	6859      	ldr	r1, [r3, #4]
   b4c26:	462a      	mov	r2, r5
   b4c28:	c203      	stmia	r2!, {r0, r1}
   b4c2a:	3308      	adds	r3, #8
   b4c2c:	42a3      	cmp	r3, r4
   b4c2e:	4615      	mov	r5, r2
   b4c30:	d1f7      	bne.n	b4c22 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4c32:	a901      	add	r1, sp, #4
   b4c34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4c36:	ad07      	add	r5, sp, #28
   b4c38:	f000 fa00 	bl	b503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c3e:	1d3c      	adds	r4, r7, #4
   b4c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c42:	682b      	ldr	r3, [r5, #0]
   b4c44:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4c46:	4649      	mov	r1, r9
   b4c48:	e7ca      	b.n	b4be0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4c4a:	9800      	ldr	r0, [sp, #0]
   b4c4c:	f7ff fe5c 	bl	b4908 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4c50:	4638      	mov	r0, r7
   b4c52:	b015      	add	sp, #84	; 0x54
   b4c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4c58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4c58:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4c5a:	4a03      	ldr	r2, [pc, #12]	; (b4c68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4c5c:	601a      	str	r2, [r3, #0]
   b4c5e:	2200      	movs	r2, #0
   b4c60:	605a      	str	r2, [r3, #4]

} // spark
   b4c62:	4770      	bx	lr
   b4c64:	2003e6b8 	.word	0x2003e6b8
   b4c68:	000b6ed8 	.word	0x000b6ed8

000b4c6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4c6c:	2200      	movs	r2, #0
   b4c6e:	6840      	ldr	r0, [r0, #4]
   b4c70:	4611      	mov	r1, r2
   b4c72:	f7ff be89 	b.w	b4988 <network_ready>

000b4c76 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c76:	2200      	movs	r2, #0
   b4c78:	6840      	ldr	r0, [r0, #4]
   b4c7a:	4611      	mov	r1, r2
   b4c7c:	f7ff bea4 	b.w	b49c8 <network_listening>

000b4c80 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c80:	2200      	movs	r2, #0
   b4c82:	6840      	ldr	r0, [r0, #4]
   b4c84:	4611      	mov	r1, r2
   b4c86:	f7ff beaf 	b.w	b49e8 <network_get_listen_timeout>

000b4c8a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c8a:	6840      	ldr	r0, [r0, #4]
   b4c8c:	2200      	movs	r2, #0
   b4c8e:	f7ff bea3 	b.w	b49d8 <network_set_listen_timeout>

000b4c92 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c92:	6840      	ldr	r0, [r0, #4]
   b4c94:	2200      	movs	r2, #0
   b4c96:	f081 0101 	eor.w	r1, r1, #1
   b4c9a:	f7ff be8d 	b.w	b49b8 <network_listen>

000b4c9e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c9e:	2300      	movs	r3, #0
   b4ca0:	6840      	ldr	r0, [r0, #4]
   b4ca2:	461a      	mov	r2, r3
   b4ca4:	4619      	mov	r1, r3
   b4ca6:	f7ff be7f 	b.w	b49a8 <network_off>

000b4caa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4caa:	2300      	movs	r3, #0
   b4cac:	6840      	ldr	r0, [r0, #4]
   b4cae:	461a      	mov	r2, r3
   b4cb0:	4619      	mov	r1, r3
   b4cb2:	f7ff be71 	b.w	b4998 <network_on>

000b4cb6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4cb6:	2200      	movs	r2, #0
   b4cb8:	6840      	ldr	r0, [r0, #4]
   b4cba:	4611      	mov	r1, r2
   b4cbc:	f7ff be54 	b.w	b4968 <network_connecting>

000b4cc0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cc0:	6840      	ldr	r0, [r0, #4]
   b4cc2:	2200      	movs	r2, #0
   b4cc4:	2102      	movs	r1, #2
   b4cc6:	f7ff be57 	b.w	b4978 <network_disconnect>

000b4cca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cca:	2300      	movs	r3, #0
   b4ccc:	6840      	ldr	r0, [r0, #4]
   b4cce:	461a      	mov	r2, r3
   b4cd0:	f7ff be42 	b.w	b4958 <network_connect>

000b4cd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4cd4:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4cd6:	2204      	movs	r2, #4
   b4cd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4cda:	4a02      	ldr	r2, [pc, #8]	; (b4ce4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4cdc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4cde:	4770      	bx	lr
   b4ce0:	2003e6c0 	.word	0x2003e6c0
   b4ce4:	000b6f14 	.word	0x000b6f14

000b4ce8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4ce8:	4770      	bx	lr

000b4cea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4cea:	7441      	strb	r1, [r0, #17]
}
   b4cec:	4770      	bx	lr

000b4cee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4cee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4cf0:	7c00      	ldrb	r0, [r0, #16]
   b4cf2:	f7ff fd47 	bl	b4784 <hal_usart_available_data_for_write>
}
   b4cf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cfa:	bd08      	pop	{r3, pc}

000b4cfc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4cfc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4cfe:	7c00      	ldrb	r0, [r0, #16]
   b4d00:	f7ff fd20 	bl	b4744 <hal_usart_available>
}
   b4d04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d08:	bd08      	pop	{r3, pc}

000b4d0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4d0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4d0c:	7c00      	ldrb	r0, [r0, #16]
   b4d0e:	f7ff fd29 	bl	b4764 <hal_usart_peek>
}
   b4d12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d16:	bd08      	pop	{r3, pc}

000b4d18 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4d18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4d1a:	7c00      	ldrb	r0, [r0, #16]
   b4d1c:	f7ff fd1a 	bl	b4754 <hal_usart_read>
}
   b4d20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d24:	bd08      	pop	{r3, pc}

000b4d26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4d26:	7c00      	ldrb	r0, [r0, #16]
   b4d28:	f7ff bd24 	b.w	b4774 <hal_usart_flush>

000b4d2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d2e:	7c45      	ldrb	r5, [r0, #17]
{
   b4d30:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d32:	b12d      	cbz	r5, b4d40 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4d34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4d36:	b003      	add	sp, #12
   b4d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4d3c:	f7ff bcfa 	b.w	b4734 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4d40:	7c00      	ldrb	r0, [r0, #16]
   b4d42:	9101      	str	r1, [sp, #4]
   b4d44:	f7ff fd1e 	bl	b4784 <hal_usart_available_data_for_write>
   b4d48:	2800      	cmp	r0, #0
   b4d4a:	9901      	ldr	r1, [sp, #4]
   b4d4c:	dcf2      	bgt.n	b4d34 <_ZN11USARTSerial5writeEh+0x8>
}
   b4d4e:	4628      	mov	r0, r5
   b4d50:	b003      	add	sp, #12
   b4d52:	bd30      	pop	{r4, r5, pc}

000b4d54 <_ZN11USARTSerialD0Ev>:
   b4d54:	b510      	push	{r4, lr}
   b4d56:	2114      	movs	r1, #20
   b4d58:	4604      	mov	r4, r0
   b4d5a:	f7ff f99e 	bl	b409a <_ZdlPvj>
   b4d5e:	4620      	mov	r0, r4
   b4d60:	bd10      	pop	{r4, pc}
	...

000b4d64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4d64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d6a:	4604      	mov	r4, r0
   b4d6c:	4608      	mov	r0, r1
   b4d6e:	4611      	mov	r1, r2
   b4d70:	2200      	movs	r2, #0
   b4d72:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d76:	4b04      	ldr	r3, [pc, #16]	; (b4d88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4d78:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d7a:	2301      	movs	r3, #1
  _serial = serial;
   b4d7c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d7e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4d80:	f7ff fd08 	bl	b4794 <hal_usart_init_ex>
}
   b4d84:	4620      	mov	r0, r4
   b4d86:	bd10      	pop	{r4, pc}
   b4d88:	000b6f58 	.word	0x000b6f58

000b4d8c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4d8c:	4770      	bx	lr

000b4d8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d90:	4606      	mov	r6, r0
   b4d92:	4615      	mov	r5, r2
   b4d94:	460c      	mov	r4, r1
   b4d96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4d98:	42bc      	cmp	r4, r7
   b4d9a:	d006      	beq.n	b4daa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4d9c:	6833      	ldr	r3, [r6, #0]
   b4d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4da2:	689b      	ldr	r3, [r3, #8]
   b4da4:	4630      	mov	r0, r6
   b4da6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4da8:	e7f6      	b.n	b4d98 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4daa:	4628      	mov	r0, r5
   b4dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4dae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4dae:	7c00      	ldrb	r0, [r0, #16]
   b4db0:	2200      	movs	r2, #0
   b4db2:	f7ff bc87 	b.w	b46c4 <hal_i2c_write>

000b4db6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4db6:	7c00      	ldrb	r0, [r0, #16]
   b4db8:	2100      	movs	r1, #0
   b4dba:	f7ff bc8b 	b.w	b46d4 <hal_i2c_available>

000b4dbe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4dbe:	7c00      	ldrb	r0, [r0, #16]
   b4dc0:	2100      	movs	r1, #0
   b4dc2:	f7ff bc8f 	b.w	b46e4 <hal_i2c_read>

000b4dc6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4dc6:	7c00      	ldrb	r0, [r0, #16]
   b4dc8:	2100      	movs	r1, #0
   b4dca:	f7ff bc93 	b.w	b46f4 <hal_i2c_peek>

000b4dce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4dce:	7c00      	ldrb	r0, [r0, #16]
   b4dd0:	2100      	movs	r1, #0
   b4dd2:	f7ff bc97 	b.w	b4704 <hal_i2c_flush>

000b4dd6 <_ZN7TwoWireD0Ev>:
   b4dd6:	b510      	push	{r4, lr}
   b4dd8:	2114      	movs	r1, #20
   b4dda:	4604      	mov	r4, r0
   b4ddc:	f7ff f95d 	bl	b409a <_ZdlPvj>
   b4de0:	4620      	mov	r0, r4
   b4de2:	bd10      	pop	{r4, pc}

000b4de4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4de4:	b510      	push	{r4, lr}
   b4de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4dea:	4604      	mov	r4, r0
   b4dec:	4608      	mov	r0, r1
   b4dee:	2100      	movs	r1, #0
   b4df0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4df4:	4b03      	ldr	r3, [pc, #12]	; (b4e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4df6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4df8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4dfa:	4611      	mov	r1, r2
   b4dfc:	f7ff fc8a 	bl	b4714 <hal_i2c_init>
}
   b4e00:	4620      	mov	r0, r4
   b4e02:	bd10      	pop	{r4, pc}
   b4e04:	000b6f88 	.word	0x000b6f88

000b4e08 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b4e08:	7c00      	ldrb	r0, [r0, #16]
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	f7ff bc3a 	b.w	b4684 <hal_i2c_set_speed>

000b4e10 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4e10:	2300      	movs	r3, #0
   b4e12:	7c00      	ldrb	r0, [r0, #16]
   b4e14:	461a      	mov	r2, r3
   b4e16:	4619      	mov	r1, r3
   b4e18:	f7ff bc3c 	b.w	b4694 <hal_i2c_begin>

000b4e1c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4e1e:	2200      	movs	r2, #0
   b4e20:	2314      	movs	r3, #20
   b4e22:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4e26:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b4e2a:	780b      	ldrb	r3, [r1, #0]
   b4e2c:	f88d 3008 	strb.w	r3, [sp, #8]
   b4e30:	684b      	ldr	r3, [r1, #4]
   b4e32:	9303      	str	r3, [sp, #12]
   b4e34:	68cb      	ldr	r3, [r1, #12]
   b4e36:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4e38:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b4e3a:	7a0b      	ldrb	r3, [r1, #8]
   b4e3c:	9305      	str	r3, [sp, #20]
   b4e3e:	a901      	add	r1, sp, #4
   b4e40:	f7ff fc70 	bl	b4724 <hal_i2c_request_ex>
}
   b4e44:	b007      	add	sp, #28
   b4e46:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e4a <_ZN7TwoWire11requestFromEhjh>:
{
   b4e4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b4e4c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b4e4e:	f88d 1000 	strb.w	r1, [sp]
   b4e52:	f04f 0164 	mov.w	r1, #100	; 0x64
   b4e56:	9103      	str	r1, [sp, #12]
   b4e58:	bf18      	it	ne
   b4e5a:	2301      	movne	r3, #1
   b4e5c:	4669      	mov	r1, sp
    size_ = size;
   b4e5e:	9201      	str	r2, [sp, #4]
   b4e60:	f88d 3008 	strb.w	r3, [sp, #8]
   b4e64:	f7ff ffda 	bl	b4e1c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4e68:	b005      	add	sp, #20
   b4e6a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e6e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b4e6e:	2301      	movs	r3, #1
   b4e70:	f7ff bfeb 	b.w	b4e4a <_ZN7TwoWire11requestFromEhjh>

000b4e74 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4e74:	7c00      	ldrb	r0, [r0, #16]
   b4e76:	2200      	movs	r2, #0
   b4e78:	f7ff bc14 	b.w	b46a4 <hal_i2c_begin_transmission>

000b4e7c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4e7c:	7c00      	ldrb	r0, [r0, #16]
   b4e7e:	2200      	movs	r2, #0
   b4e80:	f7ff bc18 	b.w	b46b4 <hal_i2c_end_transmission>

000b4e84 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4e84:	2101      	movs	r1, #1
   b4e86:	f7ff bff9 	b.w	b4e7c <_ZN7TwoWire15endTransmissionEh>

000b4e8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b4e8a:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b4e8c:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4e8e:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4e90:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4e92:	dd03      	ble.n	b4e9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b4e94:	f7ff fdfc 	bl	b4a90 <realloc>
            if (!d) {
   b4e98:	b918      	cbnz	r0, b4ea2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4e9a:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4e9c:	f7ff fdf0 	bl	b4a80 <free>
        T* d = nullptr;
   b4ea0:	2000      	movs	r0, #0
        data_ = d;
   b4ea2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4ea4:	60a5      	str	r5, [r4, #8]
        return true;
   b4ea6:	2001      	movs	r0, #1
   b4ea8:	e7f7      	b.n	b4e9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4eaa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4eaa:	7441      	strb	r1, [r0, #17]
}
   b4eac:	4770      	bx	lr

000b4eae <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4eae:	4770      	bx	lr

000b4eb0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4eb0:	4770      	bx	lr

000b4eb2 <_ZN9USBSerial4readEv>:
{
   b4eb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4eb4:	2100      	movs	r1, #0
   b4eb6:	7c00      	ldrb	r0, [r0, #16]
   b4eb8:	f7ff fbcc 	bl	b4654 <HAL_USB_USART_Receive_Data>
}
   b4ebc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ec0:	bd08      	pop	{r3, pc}

000b4ec2 <_ZN9USBSerial4peekEv>:
{
   b4ec2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ec4:	2101      	movs	r1, #1
   b4ec6:	7c00      	ldrb	r0, [r0, #16]
   b4ec8:	f7ff fbc4 	bl	b4654 <HAL_USB_USART_Receive_Data>
}
   b4ecc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ed0:	bd08      	pop	{r3, pc}

000b4ed2 <_ZN9USBSerial17availableForWriteEv>:
{
   b4ed2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4ed4:	7c00      	ldrb	r0, [r0, #16]
   b4ed6:	f7ff fbb5 	bl	b4644 <HAL_USB_USART_Available_Data_For_Write>
}
   b4eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ede:	bd08      	pop	{r3, pc}

000b4ee0 <_ZN9USBSerial9availableEv>:
{
   b4ee0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4ee2:	7c00      	ldrb	r0, [r0, #16]
   b4ee4:	f7ff fba6 	bl	b4634 <HAL_USB_USART_Available_Data>
}
   b4ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4eec:	bd08      	pop	{r3, pc}

000b4eee <_ZN9USBSerial5writeEh>:
{
   b4eee:	b513      	push	{r0, r1, r4, lr}
   b4ef0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ef2:	7c00      	ldrb	r0, [r0, #16]
{
   b4ef4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ef6:	f7ff fba5 	bl	b4644 <HAL_USB_USART_Available_Data_For_Write>
   b4efa:	2800      	cmp	r0, #0
   b4efc:	9901      	ldr	r1, [sp, #4]
   b4efe:	dc01      	bgt.n	b4f04 <_ZN9USBSerial5writeEh+0x16>
   b4f00:	7c60      	ldrb	r0, [r4, #17]
   b4f02:	b120      	cbz	r0, b4f0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f04:	7c20      	ldrb	r0, [r4, #16]
   b4f06:	f7ff fbad 	bl	b4664 <HAL_USB_USART_Send_Data>
   b4f0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f0e:	b002      	add	sp, #8
   b4f10:	bd10      	pop	{r4, pc}

000b4f12 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f12:	7c00      	ldrb	r0, [r0, #16]
   b4f14:	f7ff bbae 	b.w	b4674 <HAL_USB_USART_Flush_Data>

000b4f18 <_ZN9USBSerialD0Ev>:
   b4f18:	b510      	push	{r4, lr}
   b4f1a:	2114      	movs	r1, #20
   b4f1c:	4604      	mov	r4, r0
   b4f1e:	f7ff f8bc 	bl	b409a <_ZdlPvj>
   b4f22:	4620      	mov	r0, r4
   b4f24:	bd10      	pop	{r4, pc}
	...

000b4f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4f28:	b510      	push	{r4, lr}
   b4f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f2e:	4604      	mov	r4, r0
   b4f30:	4608      	mov	r0, r1
   b4f32:	2100      	movs	r1, #0
   b4f34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4f38:	4b04      	ldr	r3, [pc, #16]	; (b4f4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4f3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f3c:	2301      	movs	r3, #1
  _serial = serial;
   b4f3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4f42:	4611      	mov	r1, r2
   b4f44:	f7ff fb6e 	bl	b4624 <HAL_USB_USART_Init>
}
   b4f48:	4620      	mov	r0, r4
   b4f4a:	bd10      	pop	{r4, pc}
   b4f4c:	000b6fb0 	.word	0x000b6fb0

000b4f50 <_Z19acquireSerialBufferv>:
{
   b4f50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4f52:	2214      	movs	r2, #20
{
   b4f54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4f56:	2100      	movs	r1, #0
   b4f58:	f001 fe84 	bl	b6c64 <memset>
}
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	bd10      	pop	{r4, pc}

000b4f60 <_Z16_fetch_usbserialv>:
{
   b4f60:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f62:	4c0f      	ldr	r4, [pc, #60]	; (b4fa0 <_Z16_fetch_usbserialv+0x40>)
{
   b4f64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4f66:	a803      	add	r0, sp, #12
   b4f68:	f7ff fff2 	bl	b4f50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f6c:	7821      	ldrb	r1, [r4, #0]
   b4f6e:	f3bf 8f5b 	dmb	ish
   b4f72:	f011 0101 	ands.w	r1, r1, #1
   b4f76:	d10f      	bne.n	b4f98 <_Z16_fetch_usbserialv+0x38>
   b4f78:	4620      	mov	r0, r4
   b4f7a:	9101      	str	r1, [sp, #4]
   b4f7c:	f7ff f88f 	bl	b409e <__cxa_guard_acquire>
   b4f80:	9901      	ldr	r1, [sp, #4]
   b4f82:	b148      	cbz	r0, b4f98 <_Z16_fetch_usbserialv+0x38>
   b4f84:	aa03      	add	r2, sp, #12
   b4f86:	4807      	ldr	r0, [pc, #28]	; (b4fa4 <_Z16_fetch_usbserialv+0x44>)
   b4f88:	f7ff ffce 	bl	b4f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f7ff f88b 	bl	b40a8 <__cxa_guard_release>
   b4f92:	4805      	ldr	r0, [pc, #20]	; (b4fa8 <_Z16_fetch_usbserialv+0x48>)
   b4f94:	f001 fe28 	bl	b6be8 <atexit>
	return _usbserial;
}
   b4f98:	4802      	ldr	r0, [pc, #8]	; (b4fa4 <_Z16_fetch_usbserialv+0x44>)
   b4f9a:	b008      	add	sp, #32
   b4f9c:	bd10      	pop	{r4, pc}
   b4f9e:	bf00      	nop
   b4fa0:	2003e6c8 	.word	0x2003e6c8
   b4fa4:	2003e6cc 	.word	0x2003e6cc
   b4fa8:	000b4eaf 	.word	0x000b4eaf

000b4fac <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4fac:	4770      	bx	lr

000b4fae <_ZN9IPAddressD0Ev>:
   b4fae:	b510      	push	{r4, lr}
   b4fb0:	2118      	movs	r1, #24
   b4fb2:	4604      	mov	r4, r0
   b4fb4:	f7ff f871 	bl	b409a <_ZdlPvj>
   b4fb8:	4620      	mov	r0, r4
   b4fba:	bd10      	pop	{r4, pc}

000b4fbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4fbe:	7d03      	ldrb	r3, [r0, #20]
   b4fc0:	2b06      	cmp	r3, #6
{
   b4fc2:	b08d      	sub	sp, #52	; 0x34
   b4fc4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4fc6:	f100 0704 	add.w	r7, r0, #4
   b4fca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4fce:	d012      	beq.n	b4ff6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4fd0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4fd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4fd8:	220a      	movs	r2, #10
   b4fda:	4630      	mov	r0, r6
   b4fdc:	f000 f971 	bl	b52c2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4fe0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4fe2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4fe4:	d019      	beq.n	b501a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4fe6:	2c00      	cmp	r4, #0
   b4fe8:	d0f4      	beq.n	b4fd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4fea:	212e      	movs	r1, #46	; 0x2e
   b4fec:	4630      	mov	r0, r6
   b4fee:	f000 f94f 	bl	b5290 <_ZN5Print5printEc>
   b4ff2:	4404      	add	r4, r0
   b4ff4:	e7ee      	b.n	b4fd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ff6:	232f      	movs	r3, #47	; 0x2f
   b4ff8:	466a      	mov	r2, sp
   b4ffa:	4639      	mov	r1, r7
   b4ffc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ffe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5002:	f7ff fbcf 	bl	b47a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5006:	4668      	mov	r0, sp
   b5008:	f001 fe74 	bl	b6cf4 <strlen>
   b500c:	6833      	ldr	r3, [r6, #0]
   b500e:	4602      	mov	r2, r0
   b5010:	68db      	ldr	r3, [r3, #12]
   b5012:	4669      	mov	r1, sp
   b5014:	4630      	mov	r0, r6
   b5016:	4798      	blx	r3
   b5018:	4604      	mov	r4, r0
    }
    return n;
}
   b501a:	4620      	mov	r0, r4
   b501c:	b00d      	add	sp, #52	; 0x34
   b501e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5020 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5020:	b510      	push	{r4, lr}
   b5022:	4b05      	ldr	r3, [pc, #20]	; (b5038 <_ZN9IPAddressC1Ev+0x18>)
   b5024:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5026:	2211      	movs	r2, #17
   b5028:	f840 3b04 	str.w	r3, [r0], #4
   b502c:	2100      	movs	r1, #0
   b502e:	f001 fe19 	bl	b6c64 <memset>
}
   b5032:	4620      	mov	r0, r4
   b5034:	bd10      	pop	{r4, pc}
   b5036:	bf00      	nop
   b5038:	000b6fe0 	.word	0x000b6fe0

000b503c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b503c:	4603      	mov	r3, r0
   b503e:	4a07      	ldr	r2, [pc, #28]	; (b505c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5040:	b510      	push	{r4, lr}
   b5042:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5046:	f101 0210 	add.w	r2, r1, #16
   b504a:	f851 4b04 	ldr.w	r4, [r1], #4
   b504e:	f843 4b04 	str.w	r4, [r3], #4
   b5052:	4291      	cmp	r1, r2
   b5054:	d1f9      	bne.n	b504a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5056:	780a      	ldrb	r2, [r1, #0]
   b5058:	701a      	strb	r2, [r3, #0]
}
   b505a:	bd10      	pop	{r4, pc}
   b505c:	000b6fe0 	.word	0x000b6fe0

000b5060 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5060:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5062:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5066:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b506a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b506e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5072:	2304      	movs	r3, #4
   b5074:	6041      	str	r1, [r0, #4]
   b5076:	7503      	strb	r3, [r0, #20]
}
   b5078:	bd10      	pop	{r4, pc}
	...

000b507c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b507c:	b507      	push	{r0, r1, r2, lr}
   b507e:	4b06      	ldr	r3, [pc, #24]	; (b5098 <_ZN9IPAddressC1EPKh+0x1c>)
   b5080:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5082:	78cb      	ldrb	r3, [r1, #3]
   b5084:	9300      	str	r3, [sp, #0]
   b5086:	788b      	ldrb	r3, [r1, #2]
   b5088:	784a      	ldrb	r2, [r1, #1]
   b508a:	7809      	ldrb	r1, [r1, #0]
   b508c:	f7ff ffe8 	bl	b5060 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5090:	b003      	add	sp, #12
   b5092:	f85d fb04 	ldr.w	pc, [sp], #4
   b5096:	bf00      	nop
   b5098:	000b6fe0 	.word	0x000b6fe0

000b509c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b509c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b509e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b50a0:	4604      	mov	r4, r0
      if (_M_manager)
   b50a2:	b113      	cbz	r3, b50aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b50a4:	2203      	movs	r2, #3
   b50a6:	4601      	mov	r1, r0
   b50a8:	4798      	blx	r3
    }
   b50aa:	4620      	mov	r0, r4
   b50ac:	bd10      	pop	{r4, pc}

000b50ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b50ae:	b513      	push	{r0, r1, r4, lr}
   b50b0:	460b      	mov	r3, r1
   b50b2:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50b4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50b8:	466c      	mov	r4, sp
   b50ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b50be:	e893 0003 	ldmia.w	r3, {r0, r1}
   b50c2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b50c6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b50ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b50ce:	b002      	add	sp, #8
   b50d0:	bd10      	pop	{r4, pc}

000b50d2 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b50d2:	2100      	movs	r1, #0
   b50d4:	f7ff bca8 	b.w	b4a28 <system_delay_ms>

000b50d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b50d8:	4b01      	ldr	r3, [pc, #4]	; (b50e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b50da:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b50dc:	4770      	bx	lr
   b50de:	bf00      	nop
   b50e0:	2003e5e0 	.word	0x2003e5e0

000b50e4 <serialEventRun>:
{
   b50e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b50e6:	4b0b      	ldr	r3, [pc, #44]	; (b5114 <serialEventRun+0x30>)
   b50e8:	b143      	cbz	r3, b50fc <serialEventRun+0x18>
   b50ea:	f7ff ff39 	bl	b4f60 <_Z16_fetch_usbserialv>
   b50ee:	6803      	ldr	r3, [r0, #0]
   b50f0:	691b      	ldr	r3, [r3, #16]
   b50f2:	4798      	blx	r3
   b50f4:	2800      	cmp	r0, #0
   b50f6:	dd01      	ble.n	b50fc <serialEventRun+0x18>
        serialEvent();
   b50f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b50fc:	4b06      	ldr	r3, [pc, #24]	; (b5118 <serialEventRun+0x34>)
   b50fe:	b143      	cbz	r3, b5112 <serialEventRun+0x2e>
   b5100:	f001 fc36 	bl	b6970 <_Z22__fetch_global_Serial1v>
   b5104:	6803      	ldr	r3, [r0, #0]
   b5106:	691b      	ldr	r3, [r3, #16]
   b5108:	4798      	blx	r3
   b510a:	2800      	cmp	r0, #0
   b510c:	dd01      	ble.n	b5112 <serialEventRun+0x2e>
        serialEvent1();
   b510e:	f3af 8000 	nop.w
}
   b5112:	bd08      	pop	{r3, pc}
	...

000b511c <_post_loop>:
{
   b511c:	b508      	push	{r3, lr}
	serialEventRun();
   b511e:	f7ff ffe1 	bl	b50e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5122:	f7ff fbe9 	bl	b48f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5126:	4b01      	ldr	r3, [pc, #4]	; (b512c <_post_loop+0x10>)
   b5128:	6018      	str	r0, [r3, #0]
}
   b512a:	bd08      	pop	{r3, pc}
   b512c:	2003e740 	.word	0x2003e740

000b5130 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5130:	4805      	ldr	r0, [pc, #20]	; (b5148 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5132:	4a06      	ldr	r2, [pc, #24]	; (b514c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5134:	4906      	ldr	r1, [pc, #24]	; (b5150 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5136:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5138:	1a12      	subs	r2, r2, r0
   b513a:	f001 fd6b 	bl	b6c14 <memcpy>
    __backup_sram_signature = signature;
   b513e:	4b05      	ldr	r3, [pc, #20]	; (b5154 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5140:	4a05      	ldr	r2, [pc, #20]	; (b5158 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5142:	601a      	str	r2, [r3, #0]
}
   b5144:	bd08      	pop	{r3, pc}
   b5146:	bf00      	nop
   b5148:	2003f400 	.word	0x2003f400
   b514c:	2003f404 	.word	0x2003f404
   b5150:	000b73f4 	.word	0x000b73f4
   b5154:	2003f400 	.word	0x2003f400
   b5158:	9a271c1e 	.word	0x9a271c1e

000b515c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b515c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b515e:	2300      	movs	r3, #0
   b5160:	9300      	str	r3, [sp, #0]
   b5162:	461a      	mov	r2, r3
   b5164:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5168:	f7ff fc78 	bl	b4a5c <system_ctrl_set_result>
}
   b516c:	b003      	add	sp, #12
   b516e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5174 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5174:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5176:	8843      	ldrh	r3, [r0, #2]
   b5178:	2b0a      	cmp	r3, #10
   b517a:	d008      	beq.n	b518e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b517c:	2b50      	cmp	r3, #80	; 0x50
   b517e:	d10b      	bne.n	b5198 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5180:	4b09      	ldr	r3, [pc, #36]	; (b51a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5182:	681b      	ldr	r3, [r3, #0]
   b5184:	b14b      	cbz	r3, b519a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5186:	b003      	add	sp, #12
   b5188:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b518c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b518e:	f7ff ffe5 	bl	b515c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5192:	b003      	add	sp, #12
   b5194:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5198:	2300      	movs	r3, #0
   b519a:	9300      	str	r3, [sp, #0]
   b519c:	461a      	mov	r2, r3
   b519e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b51a2:	f7ff fc5b 	bl	b4a5c <system_ctrl_set_result>
}
   b51a6:	e7f4      	b.n	b5192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b51a8:	2003e6e4 	.word	0x2003e6e4

000b51ac <module_user_init_hook>:
{
   b51ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b51ae:	4812      	ldr	r0, [pc, #72]	; (b51f8 <module_user_init_hook+0x4c>)
   b51b0:	2100      	movs	r1, #0
   b51b2:	f7ff fc85 	bl	b4ac0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b51b6:	4b11      	ldr	r3, [pc, #68]	; (b51fc <module_user_init_hook+0x50>)
   b51b8:	681a      	ldr	r2, [r3, #0]
   b51ba:	4b11      	ldr	r3, [pc, #68]	; (b5200 <module_user_init_hook+0x54>)
   b51bc:	429a      	cmp	r2, r3
   b51be:	4b11      	ldr	r3, [pc, #68]	; (b5204 <module_user_init_hook+0x58>)
   b51c0:	bf0c      	ite	eq
   b51c2:	2201      	moveq	r2, #1
   b51c4:	2200      	movne	r2, #0
   b51c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b51c8:	d001      	beq.n	b51ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b51ca:	f7ff ffb1 	bl	b5130 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b51ce:	f7ff fb83 	bl	b48d8 <HAL_RNG_GetRandomNumber>
   b51d2:	4604      	mov	r4, r0
    srand(seed);
   b51d4:	f001 fd4e 	bl	b6c74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b51d8:	4b0b      	ldr	r3, [pc, #44]	; (b5208 <module_user_init_hook+0x5c>)
   b51da:	b113      	cbz	r3, b51e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b51dc:	4620      	mov	r0, r4
   b51de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b51e2:	2100      	movs	r1, #0
   b51e4:	4808      	ldr	r0, [pc, #32]	; (b5208 <module_user_init_hook+0x5c>)
   b51e6:	f7ff fbaf 	bl	b4948 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b51ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b51ee:	4807      	ldr	r0, [pc, #28]	; (b520c <module_user_init_hook+0x60>)
   b51f0:	2100      	movs	r1, #0
   b51f2:	f7ff bc29 	b.w	b4a48 <system_ctrl_set_app_request_handler>
   b51f6:	bf00      	nop
   b51f8:	000b50d9 	.word	0x000b50d9
   b51fc:	2003f400 	.word	0x2003f400
   b5200:	9a271c1e 	.word	0x9a271c1e
   b5204:	2003e6e0 	.word	0x2003e6e0
   b5208:	00000000 	.word	0x00000000
   b520c:	000b5175 	.word	0x000b5175

000b5210 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5210:	4b01      	ldr	r3, [pc, #4]	; (b5218 <_GLOBAL__sub_I_RGB+0x8>)
   b5212:	2200      	movs	r2, #0
   b5214:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5216:	4770      	bx	lr
   b5218:	2003e6e8 	.word	0x2003e6e8

000b521c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b521c:	4b02      	ldr	r3, [pc, #8]	; (b5228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b521e:	681a      	ldr	r2, [r3, #0]
   b5220:	4b02      	ldr	r3, [pc, #8]	; (b522c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5222:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5224:	4770      	bx	lr
   b5226:	bf00      	nop
   b5228:	2003e5dc 	.word	0x2003e5dc
   b522c:	2003e6f8 	.word	0x2003e6f8

000b5230 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5230:	4b01      	ldr	r3, [pc, #4]	; (b5238 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5232:	4a02      	ldr	r2, [pc, #8]	; (b523c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5234:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5236:	4770      	bx	lr
   b5238:	2003e6fc 	.word	0x2003e6fc
   b523c:	000b7008 	.word	0x000b7008

000b5240 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5242:	4606      	mov	r6, r0
   b5244:	460d      	mov	r5, r1
  size_t n = 0;
   b5246:	188f      	adds	r7, r1, r2
   b5248:	2400      	movs	r4, #0
  while (size--) {
   b524a:	42bd      	cmp	r5, r7
   b524c:	d00c      	beq.n	b5268 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b524e:	6833      	ldr	r3, [r6, #0]
   b5250:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5254:	689b      	ldr	r3, [r3, #8]
   b5256:	4630      	mov	r0, r6
   b5258:	4798      	blx	r3
     if (chunk>=0)
   b525a:	1e03      	subs	r3, r0, #0
   b525c:	db01      	blt.n	b5262 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b525e:	441c      	add	r4, r3
  while (size--) {
   b5260:	e7f3      	b.n	b524a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5262:	2c00      	cmp	r4, #0
   b5264:	bf08      	it	eq
   b5266:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5268:	4620      	mov	r0, r4
   b526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b526c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b526c:	b513      	push	{r0, r1, r4, lr}
   b526e:	4604      	mov	r4, r0
    }
   b5270:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5272:	b159      	cbz	r1, b528c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5274:	9101      	str	r1, [sp, #4]
   b5276:	f001 fd3d 	bl	b6cf4 <strlen>
   b527a:	6823      	ldr	r3, [r4, #0]
   b527c:	9901      	ldr	r1, [sp, #4]
   b527e:	68db      	ldr	r3, [r3, #12]
   b5280:	4602      	mov	r2, r0
   b5282:	4620      	mov	r0, r4
    }
   b5284:	b002      	add	sp, #8
   b5286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b528a:	4718      	bx	r3
    }
   b528c:	b002      	add	sp, #8
   b528e:	bd10      	pop	{r4, pc}

000b5290 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5290:	6803      	ldr	r3, [r0, #0]
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4718      	bx	r3

000b5296 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5296:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5298:	210d      	movs	r1, #13
{
   b529a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b529c:	f7ff fff8 	bl	b5290 <_ZN5Print5printEc>
  n += print('\n');
   b52a0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b52a2:	4604      	mov	r4, r0
  n += print('\n');
   b52a4:	4628      	mov	r0, r5
   b52a6:	f7ff fff3 	bl	b5290 <_ZN5Print5printEc>
  return n;
}
   b52aa:	4420      	add	r0, r4
   b52ac:	bd38      	pop	{r3, r4, r5, pc}

000b52ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b52ae:	b538      	push	{r3, r4, r5, lr}
   b52b0:	4605      	mov	r5, r0
  return write(str);
   b52b2:	f7ff ffdb 	bl	b526c <_ZN5Print5writeEPKc>
   b52b6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b52b8:	4628      	mov	r0, r5
   b52ba:	f7ff ffec 	bl	b5296 <_ZN5Print7printlnEv>
  return n;
}
   b52be:	4420      	add	r0, r4
   b52c0:	bd38      	pop	{r3, r4, r5, pc}

000b52c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b52c2:	b530      	push	{r4, r5, lr}
   b52c4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b52c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b52c8:	2a01      	cmp	r2, #1
  *str = '\0';
   b52ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b52ce:	bf98      	it	ls
   b52d0:	220a      	movls	r2, #10
   b52d2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b52d4:	460d      	mov	r5, r1
   b52d6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b52da:	fb01 5312 	mls	r3, r1, r2, r5
   b52de:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52e2:	2b09      	cmp	r3, #9
   b52e4:	bf94      	ite	ls
   b52e6:	3330      	addls	r3, #48	; 0x30
   b52e8:	3337      	addhi	r3, #55	; 0x37
   b52ea:	b2db      	uxtb	r3, r3
  } while(n);
   b52ec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b52ee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b52f2:	d9ef      	bls.n	b52d4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b52f4:	4621      	mov	r1, r4
   b52f6:	f7ff ffb9 	bl	b526c <_ZN5Print5writeEPKc>
}
   b52fa:	b00b      	add	sp, #44	; 0x2c
   b52fc:	bd30      	pop	{r4, r5, pc}

000b52fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b52fe:	4770      	bx	lr

000b5300 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5300:	4770      	bx	lr

000b5302 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5302:	4770      	bx	lr

000b5304 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5304:	4770      	bx	lr
	...

000b5308 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5308:	4b06      	ldr	r3, [pc, #24]	; (b5324 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b530a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b530c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b530e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5312:	d005      	beq.n	b5320 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5314:	4608      	mov	r0, r1
   b5316:	f001 fb55 	bl	b69c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b531a:	2800      	cmp	r0, #0
   b531c:	bf08      	it	eq
   b531e:	2400      	moveq	r4, #0
      }
   b5320:	4620      	mov	r0, r4
   b5322:	bd10      	pop	{r4, pc}
   b5324:	000b6f48 	.word	0x000b6f48

000b5328 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5328:	4b06      	ldr	r3, [pc, #24]	; (b5344 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b532a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b532c:	b510      	push	{r4, lr}
   b532e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5332:	d005      	beq.n	b5340 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5334:	4608      	mov	r0, r1
   b5336:	f001 fb45 	bl	b69c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b533a:	2800      	cmp	r0, #0
   b533c:	bf08      	it	eq
   b533e:	2400      	moveq	r4, #0
      }
   b5340:	4620      	mov	r0, r4
   b5342:	bd10      	pop	{r4, pc}
   b5344:	000b6f48 	.word	0x000b6f48

000b5348 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5348:	4b06      	ldr	r3, [pc, #24]	; (b5364 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b534a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b534c:	b510      	push	{r4, lr}
   b534e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5352:	d005      	beq.n	b5360 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5354:	4608      	mov	r0, r1
   b5356:	f001 fb35 	bl	b69c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b535a:	2800      	cmp	r0, #0
   b535c:	bf08      	it	eq
   b535e:	2400      	moveq	r4, #0
      }
   b5360:	4620      	mov	r0, r4
   b5362:	bd10      	pop	{r4, pc}
   b5364:	000b6f48 	.word	0x000b6f48

000b5368 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5368:	b510      	push	{r4, lr}
   b536a:	2168      	movs	r1, #104	; 0x68
   b536c:	4604      	mov	r4, r0
   b536e:	f7fe fe94 	bl	b409a <_ZdlPvj>
   b5372:	4620      	mov	r0, r4
   b5374:	bd10      	pop	{r4, pc}

000b5376 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5376:	b510      	push	{r4, lr}
   b5378:	2128      	movs	r1, #40	; 0x28
   b537a:	4604      	mov	r4, r0
   b537c:	f7fe fe8d 	bl	b409a <_ZdlPvj>
   b5380:	4620      	mov	r0, r4
   b5382:	bd10      	pop	{r4, pc}

000b5384 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5384:	b510      	push	{r4, lr}
   b5386:	2130      	movs	r1, #48	; 0x30
   b5388:	4604      	mov	r4, r0
   b538a:	f7fe fe86 	bl	b409a <_ZdlPvj>
   b538e:	4620      	mov	r0, r4
   b5390:	bd10      	pop	{r4, pc}

000b5392 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5392:	2168      	movs	r1, #104	; 0x68
   b5394:	f7fe be81 	b.w	b409a <_ZdlPvj>

000b5398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5398:	2128      	movs	r1, #40	; 0x28
   b539a:	f7fe be7e 	b.w	b409a <_ZdlPvj>

000b539e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b539e:	2130      	movs	r1, #48	; 0x30
   b53a0:	f7fe be7b 	b.w	b409a <_ZdlPvj>

000b53a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b53a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b53a6:	2500      	movs	r5, #0
   b53a8:	1cec      	adds	r4, r5, #3
   b53aa:	428c      	cmp	r4, r1
   b53ac:	d80d      	bhi.n	b53ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b53ae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b53b0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b53b2:	5d87      	ldrb	r7, [r0, r6]
   b53b4:	4297      	cmp	r7, r2
   b53b6:	d105      	bne.n	b53c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b53b8:	4426      	add	r6, r4
   b53ba:	42b1      	cmp	r1, r6
   b53bc:	d305      	bcc.n	b53ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b53be:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b53c0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b53c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b53c4:	3401      	adds	r4, #1
   b53c6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b53c8:	e7ee      	b.n	b53a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b53ca:	2000      	movs	r0, #0
   b53cc:	e7f9      	b.n	b53c2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b53d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b53d0:	4a02      	ldr	r2, [pc, #8]	; (b53dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b53d2:	4903      	ldr	r1, [pc, #12]	; (b53e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b53d4:	200a      	movs	r0, #10
   b53d6:	f7ff baa7 	b.w	b4928 <panic_>
   b53da:	bf00      	nop
   b53dc:	000b48e9 	.word	0x000b48e9
   b53e0:	000b700c 	.word	0x000b700c

000b53e4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b53e4:	b430      	push	{r4, r5}
   b53e6:	460d      	mov	r5, r1
   b53e8:	4611      	mov	r1, r2
   b53ea:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b53ec:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b53ee:	6809      	ldr	r1, [r1, #0]
   b53f0:	6828      	ldr	r0, [r5, #0]
   b53f2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b53f6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b53f8:	bc30      	pop	{r4, r5}
   b53fa:	4760      	bx	ip

000b53fc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b53fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b53fe:	b538      	push	{r3, r4, r5, lr}
   b5400:	4604      	mov	r4, r0
	switch (__op)
   b5402:	d102      	bne.n	b540a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5404:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5406:	6023      	str	r3, [r4, #0]
	}
   b5408:	e003      	b.n	b5412 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b540a:	2a02      	cmp	r2, #2
   b540c:	d003      	beq.n	b5416 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b540e:	2a03      	cmp	r2, #3
   b5410:	d00d      	beq.n	b542e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5412:	2000      	movs	r0, #0
   b5414:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5416:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5418:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b541a:	f7fe fe3a 	bl	b4092 <_Znwj>
   b541e:	4603      	mov	r3, r0
   b5420:	2800      	cmp	r0, #0
   b5422:	d0f0      	beq.n	b5406 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5424:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5428:	e883 0003 	stmia.w	r3, {r0, r1}
   b542c:	e7eb      	b.n	b5406 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b542e:	6800      	ldr	r0, [r0, #0]
   b5430:	2800      	cmp	r0, #0
   b5432:	d0ee      	beq.n	b5412 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5434:	2108      	movs	r1, #8
   b5436:	f7fe fe30 	bl	b409a <_ZdlPvj>
   b543a:	e7ea      	b.n	b5412 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b543c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b543c:	b510      	push	{r4, lr}
   b543e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5440:	3058      	adds	r0, #88	; 0x58
   b5442:	f7ff fe2b 	bl	b509c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5446:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b544e:	f001 b8c1 	b.w	b65d4 <_ZN6StringD1Ev>

000b5452 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5452:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5456:	b2da      	uxtb	r2, r3
   b5458:	2a09      	cmp	r2, #9
   b545a:	d801      	bhi.n	b5460 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b545c:	4618      	mov	r0, r3
   b545e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5460:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5464:	2b05      	cmp	r3, #5
   b5466:	d801      	bhi.n	b546c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5468:	3857      	subs	r0, #87	; 0x57
   b546a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b546c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5470:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5472:	bf94      	ite	ls
   b5474:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5476:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b547a:	4770      	bx	lr

000b547c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b547c:	b510      	push	{r4, lr}
            locked_(false) {
   b547e:	2300      	movs	r3, #0
   b5480:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5482:	4b04      	ldr	r3, [pc, #16]	; (b5494 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5484:	4604      	mov	r4, r0
   b5486:	6818      	ldr	r0, [r3, #0]
   b5488:	f7ff f99c 	bl	b47c4 <os_mutex_recursive_lock>
        locked_ = true;
   b548c:	2301      	movs	r3, #1
   b548e:	7023      	strb	r3, [r4, #0]
    }
   b5490:	4620      	mov	r0, r4
   b5492:	bd10      	pop	{r4, pc}
   b5494:	2003e708 	.word	0x2003e708

000b5498 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5498:	b510      	push	{r4, lr}
        if (locked_) {
   b549a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b549c:	4604      	mov	r4, r0
        if (locked_) {
   b549e:	b11b      	cbz	r3, b54a8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b54a0:	4b02      	ldr	r3, [pc, #8]	; (b54ac <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b54a2:	6818      	ldr	r0, [r3, #0]
   b54a4:	f7ff f996 	bl	b47d4 <os_mutex_recursive_unlock>
    }
   b54a8:	4620      	mov	r0, r4
   b54aa:	bd10      	pop	{r4, pc}
   b54ac:	2003e708 	.word	0x2003e708

000b54b0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b54b0:	b082      	sub	sp, #8
   b54b2:	4603      	mov	r3, r0
    address_ = addr;
   b54b4:	6808      	ldr	r0, [r1, #0]
   b54b6:	6849      	ldr	r1, [r1, #4]
   b54b8:	466a      	mov	r2, sp
   b54ba:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b54bc:	466a      	mov	r2, sp
   b54be:	ca03      	ldmia	r2!, {r0, r1}
   b54c0:	6018      	str	r0, [r3, #0]
}
   b54c2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b54c4:	6059      	str	r1, [r3, #4]
}
   b54c6:	b002      	add	sp, #8
   b54c8:	4770      	bx	lr

000b54ca <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b54ca:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b54cc:	7982      	ldrb	r2, [r0, #6]
   b54ce:	798b      	ldrb	r3, [r1, #6]
   b54d0:	429a      	cmp	r2, r3
   b54d2:	d106      	bne.n	b54e2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b54d4:	2206      	movs	r2, #6
   b54d6:	f001 fb8d 	bl	b6bf4 <memcmp>
   b54da:	fab0 f080 	clz	r0, r0
   b54de:	0940      	lsrs	r0, r0, #5
}
   b54e0:	bd08      	pop	{r3, pc}
    return false;
   b54e2:	2000      	movs	r0, #0
   b54e4:	e7fc      	b.n	b54e0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b54e6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b54e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b54ea:	6003      	str	r3, [r0, #0]
   b54ec:	8083      	strh	r3, [r0, #4]
}
   b54ee:	2000      	movs	r0, #0
   b54f0:	4770      	bx	lr

000b54f2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b54f2:	b508      	push	{r3, lr}
   b54f4:	4602      	mov	r2, r0
        : address_{} {
   b54f6:	2100      	movs	r1, #0
   b54f8:	6001      	str	r1, [r0, #0]
   b54fa:	6041      	str	r1, [r0, #4]
    clear();
   b54fc:	f7ff fff3 	bl	b54e6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5500:	7191      	strb	r1, [r2, #6]
}
   b5502:	4610      	mov	r0, r2
   b5504:	bd08      	pop	{r3, pc}
	...

000b5508 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5508:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b550a:	2301      	movs	r3, #1
   b550c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b550e:	4b05      	ldr	r3, [pc, #20]	; (b5524 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5510:	4602      	mov	r2, r0
   b5512:	f103 0110 	add.w	r1, r3, #16
   b5516:	f853 4b04 	ldr.w	r4, [r3], #4
   b551a:	f842 4b04 	str.w	r4, [r2], #4
   b551e:	428b      	cmp	r3, r1
   b5520:	d1f9      	bne.n	b5516 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5522:	bd10      	pop	{r4, pc}
   b5524:	000b71b2 	.word	0x000b71b2

000b5528 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5528:	b510      	push	{r4, lr}
    if (uuid128) {
   b552a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b552c:	4604      	mov	r4, r0
    if (uuid128) {
   b552e:	b1b1      	cbz	r1, b555e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5530:	2a01      	cmp	r2, #1
   b5532:	f101 0210 	add.w	r2, r1, #16
   b5536:	d10a      	bne.n	b554e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5538:	4601      	mov	r1, r0
   b553a:	f853 0b04 	ldr.w	r0, [r3], #4
   b553e:	f841 0b04 	str.w	r0, [r1], #4
   b5542:	4293      	cmp	r3, r2
   b5544:	d1f9      	bne.n	b553a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5546:	2301      	movs	r3, #1
   b5548:	6123      	str	r3, [r4, #16]
}
   b554a:	4620      	mov	r0, r4
   b554c:	bd10      	pop	{r4, pc}
   b554e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5550:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5554:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5558:	429a      	cmp	r2, r3
   b555a:	d1f9      	bne.n	b5550 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b555c:	e7f3      	b.n	b5546 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b555e:	2210      	movs	r2, #16
   b5560:	f001 fb80 	bl	b6c64 <memset>
   b5564:	e7f1      	b.n	b554a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5566 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5566:	b538      	push	{r3, r4, r5, lr}
   b5568:	4604      	mov	r4, r0
   b556a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b556c:	461a      	mov	r2, r3
   b556e:	f7ff ffdb 	bl	b5528 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5572:	81a5      	strh	r5, [r4, #12]
}
   b5574:	4620      	mov	r0, r4
   b5576:	bd38      	pop	{r3, r4, r5, pc}

000b5578 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5578:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b557a:	6902      	ldr	r2, [r0, #16]
   b557c:	b922      	cbnz	r2, b5588 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b557e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5580:	3800      	subs	r0, #0
   b5582:	bf18      	it	ne
   b5584:	2001      	movne	r0, #1
}
   b5586:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5588:	4902      	ldr	r1, [pc, #8]	; (b5594 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b558a:	2210      	movs	r2, #16
   b558c:	f001 fb32 	bl	b6bf4 <memcmp>
   b5590:	e7f6      	b.n	b5580 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5592:	bf00      	nop
   b5594:	000b71d2 	.word	0x000b71d2

000b5598 <_ZNK8particle7BleUuid4typeEv>:
}
   b5598:	6900      	ldr	r0, [r0, #16]
   b559a:	4770      	bx	lr

000b559c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b559c:	b538      	push	{r3, r4, r5, lr}
   b559e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b55a0:	2214      	movs	r2, #20
   b55a2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b55a4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b55a6:	f001 fb5d 	bl	b6c64 <memset>
    if (type_ == BleUuidType::SHORT) {
   b55aa:	6923      	ldr	r3, [r4, #16]
   b55ac:	b91b      	cbnz	r3, b55b6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b55ae:	89a3      	ldrh	r3, [r4, #12]
   b55b0:	802b      	strh	r3, [r5, #0]
}
   b55b2:	4628      	mov	r0, r5
   b55b4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b55b6:	2301      	movs	r3, #1
   b55b8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b55ba:	4621      	mov	r1, r4
   b55bc:	462b      	mov	r3, r5
   b55be:	f104 0210 	add.w	r2, r4, #16
   b55c2:	f851 0b04 	ldr.w	r0, [r1], #4
   b55c6:	f843 0b04 	str.w	r0, [r3], #4
   b55ca:	4291      	cmp	r1, r2
   b55cc:	d1f9      	bne.n	b55c2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b55ce:	e7f0      	b.n	b55b2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b55d0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b55d0:	8980      	ldrh	r0, [r0, #12]
   b55d2:	4770      	bx	lr

000b55d4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b55d4:	4770      	bx	lr

000b55d6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b55d6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b55d8:	6902      	ldr	r2, [r0, #16]
   b55da:	690b      	ldr	r3, [r1, #16]
   b55dc:	429a      	cmp	r2, r3
   b55de:	d106      	bne.n	b55ee <_ZNK8particle7BleUuideqERKS0_+0x18>
   b55e0:	2210      	movs	r2, #16
   b55e2:	f001 fb07 	bl	b6bf4 <memcmp>
   b55e6:	fab0 f080 	clz	r0, r0
   b55ea:	0940      	lsrs	r0, r0, #5
}
   b55ec:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b55ee:	2000      	movs	r0, #0
   b55f0:	e7fc      	b.n	b55ec <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b55f4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b55f4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b55f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b55fa:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b55fc:	4b34      	ldr	r3, [pc, #208]	; (b56d0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b55fe:	460c      	mov	r4, r1
   b5600:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5602:	4602      	mov	r2, r0
   b5604:	f103 0110 	add.w	r1, r3, #16
   b5608:	f853 0b04 	ldr.w	r0, [r3], #4
   b560c:	f842 0b04 	str.w	r0, [r2], #4
   b5610:	428b      	cmp	r3, r1
   b5612:	d1f9      	bne.n	b5608 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b5614:	b344      	cbz	r4, b5668 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b5616:	2124      	movs	r1, #36	; 0x24
   b5618:	4620      	mov	r0, r4
   b561a:	f001 fb86 	bl	b6d2a <strnlen>
   b561e:	2804      	cmp	r0, #4
   b5620:	f04f 0500 	mov.w	r5, #0
   b5624:	d123      	bne.n	b566e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b5626:	f8ad 5004 	strh.w	r5, [sp, #4]
   b562a:	af01      	add	r7, sp, #4
   b562c:	1ca5      	adds	r5, r4, #2
   b562e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5630:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5634:	f7ff ff0d 	bl	b5452 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5638:	f1b0 0800 	subs.w	r8, r0, #0
   b563c:	db12      	blt.n	b5664 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b563e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b5642:	f7ff ff06 	bl	b5452 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b5646:	2800      	cmp	r0, #0
   b5648:	db0c      	blt.n	b5664 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b564a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b564c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5650:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5652:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b5656:	d1eb      	bne.n	b5630 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b5658:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b565c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b565e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5662:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5664:	2300      	movs	r3, #0
   b5666:	6133      	str	r3, [r6, #16]
}
   b5668:	b002      	add	sp, #8
   b566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b566e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5672:	2124      	movs	r1, #36	; 0x24
   b5674:	4620      	mov	r0, r4
   b5676:	f001 fb58 	bl	b6d2a <strnlen>
   b567a:	42a8      	cmp	r0, r5
   b567c:	d807      	bhi.n	b568e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b567e:	4642      	mov	r2, r8
   b5680:	2100      	movs	r1, #0
   b5682:	4630      	mov	r0, r6
}
   b5684:	b002      	add	sp, #8
   b5686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b568a:	f001 baeb 	b.w	b6c64 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b568e:	f1b8 0f00 	cmp.w	r8, #0
   b5692:	d0e9      	beq.n	b5668 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5694:	5d60      	ldrb	r0, [r4, r5]
   b5696:	f7ff fedc 	bl	b5452 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b569a:	0603      	lsls	r3, r0, #24
   b569c:	d415      	bmi.n	b56ca <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b569e:	0100      	lsls	r0, r0, #4
   b56a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b56a4:	b2c7      	uxtb	r7, r0
   b56a6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b56aa:	2124      	movs	r1, #36	; 0x24
   b56ac:	4620      	mov	r0, r4
   b56ae:	f001 fb3c 	bl	b6d2a <strnlen>
   b56b2:	3501      	adds	r5, #1
   b56b4:	42a8      	cmp	r0, r5
   b56b6:	d908      	bls.n	b56ca <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b56b8:	5d60      	ldrb	r0, [r4, r5]
   b56ba:	f7ff feca 	bl	b5452 <_ZN8particle11hexToNibbleEc>
   b56be:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b56c0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b56c2:	bfa4      	itt	ge
   b56c4:	4338      	orrge	r0, r7
   b56c6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b56ca:	3501      	adds	r5, #1
   b56cc:	e7d1      	b.n	b5672 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b56ce:	bf00      	nop
   b56d0:	000b71b2 	.word	0x000b71b2

000b56d4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b56d4:	b513      	push	{r0, r1, r4, lr}
   b56d6:	4604      	mov	r4, r0
   b56d8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b56da:	f7ff ff15 	bl	b5508 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b56de:	4620      	mov	r0, r4
   b56e0:	9901      	ldr	r1, [sp, #4]
   b56e2:	f7ff ff87 	bl	b55f4 <_ZN8particle7BleUuid9constructEPKc>
}
   b56e6:	4620      	mov	r0, r4
   b56e8:	b002      	add	sp, #8
   b56ea:	bd10      	pop	{r4, pc}

000b56ec <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b56ec:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b56ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b56f2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b56f4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b56f6:	8043      	strh	r3, [r0, #2]
   b56f8:	220e      	movs	r2, #14
   b56fa:	4629      	mov	r1, r5
   b56fc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b56fe:	7105      	strb	r5, [r0, #4]
   b5700:	3006      	adds	r0, #6
   b5702:	f001 faaf 	bl	b6c64 <memset>
   b5706:	f104 0014 	add.w	r0, r4, #20
   b570a:	f7ff fefd 	bl	b5508 <_ZN8particle7BleUuidC1Ev>
   b570e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5712:	f7ff fef9 	bl	b5508 <_ZN8particle7BleUuidC1Ev>
   b5716:	4904      	ldr	r1, [pc, #16]	; (b5728 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5718:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b571c:	f000 ffa5 	bl	b666a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5720:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b5722:	4620      	mov	r0, r4
   b5724:	bd38      	pop	{r3, r4, r5, pc}
   b5726:	bf00      	nop
   b5728:	000b6e2d 	.word	0x000b6e2d

000b572c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b572c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b572e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5732:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5736:	4293      	cmp	r3, r2
   b5738:	4618      	mov	r0, r3
   b573a:	d006      	beq.n	b574a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b573c:	6804      	ldr	r4, [r0, #0]
   b573e:	8824      	ldrh	r4, [r4, #0]
   b5740:	428c      	cmp	r4, r1
   b5742:	f103 0308 	add.w	r3, r3, #8
   b5746:	d1f6      	bne.n	b5736 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5748:	bd10      	pop	{r4, pc}
        return nullptr;
   b574a:	2000      	movs	r0, #0
   b574c:	e7fc      	b.n	b5748 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5750:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5752:	4606      	mov	r6, r0
   b5754:	b085      	sub	sp, #20
   b5756:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b5758:	460d      	mov	r5, r1
   b575a:	2900      	cmp	r1, #0
   b575c:	d050      	beq.n	b5800 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b575e:	2a00      	cmp	r2, #0
   b5760:	d04e      	beq.n	b5800 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5762:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b5764:	7823      	ldrb	r3, [r4, #0]
   b5766:	2af4      	cmp	r2, #244	; 0xf4
   b5768:	bf28      	it	cs
   b576a:	22f4      	movcs	r2, #244	; 0xf4
   b576c:	b343      	cbz	r3, b57c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b576e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b5770:	0798      	lsls	r0, r3, #30
   b5772:	d509      	bpl.n	b5788 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5774:	89a0      	ldrh	r0, [r4, #12]
   b5776:	9203      	str	r2, [sp, #12]
   b5778:	2300      	movs	r3, #0
   b577a:	f7ff f867 	bl	b484c <hal_ble_gatt_server_set_characteristic_value>
   b577e:	2800      	cmp	r0, #0
   b5780:	9a03      	ldr	r2, [sp, #12]
   b5782:	da03      	bge.n	b578c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b5784:	b005      	add	sp, #20
   b5786:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b5788:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b578c:	6834      	ldr	r4, [r6, #0]
   b578e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b5790:	06d9      	lsls	r1, r3, #27
   b5792:	d509      	bpl.n	b57a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b5794:	2f01      	cmp	r7, #1
   b5796:	d007      	beq.n	b57a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5798:	89a0      	ldrh	r0, [r4, #12]
   b579a:	2300      	movs	r3, #0
   b579c:	4629      	mov	r1, r5
}
   b579e:	b005      	add	sp, #20
   b57a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b57a4:	f7ff b884 	b.w	b48b0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b57a8:	069b      	lsls	r3, r3, #26
   b57aa:	d5eb      	bpl.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b57ac:	2f02      	cmp	r7, #2
   b57ae:	d0e9      	beq.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b57b0:	89a0      	ldrh	r0, [r4, #12]
   b57b2:	2300      	movs	r3, #0
   b57b4:	4629      	mov	r1, r5
}
   b57b6:	b005      	add	sp, #20
   b57b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b57bc:	f7ff b882 	b.w	b48c4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b57c0:	8860      	ldrh	r0, [r4, #2]
   b57c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b57c6:	4288      	cmp	r0, r1
   b57c8:	d01c      	beq.n	b5804 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b57ca:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b57cc:	074e      	lsls	r6, r1, #29
   b57ce:	d501      	bpl.n	b57d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b57d0:	2f01      	cmp	r7, #1
   b57d2:	d104      	bne.n	b57de <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b57d4:	070b      	lsls	r3, r1, #28
   b57d6:	d409      	bmi.n	b57ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b57d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b57dc:	e7d2      	b.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b57de:	89a1      	ldrh	r1, [r4, #12]
   b57e0:	9300      	str	r3, [sp, #0]
   b57e2:	4613      	mov	r3, r2
   b57e4:	462a      	mov	r2, r5
   b57e6:	f7ff f845 	bl	b4874 <hal_ble_gatt_client_write_without_response>
   b57ea:	e7cb      	b.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b57ec:	2f02      	cmp	r7, #2
   b57ee:	d0f3      	beq.n	b57d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b57f0:	2300      	movs	r3, #0
   b57f2:	89a1      	ldrh	r1, [r4, #12]
   b57f4:	9300      	str	r3, [sp, #0]
   b57f6:	4613      	mov	r3, r2
   b57f8:	462a      	mov	r2, r5
   b57fa:	f7ff f831 	bl	b4860 <hal_ble_gatt_client_write_with_response>
   b57fe:	e7c1      	b.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5800:	4802      	ldr	r0, [pc, #8]	; (b580c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b5802:	e7bf      	b.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5804:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5808:	e7bc      	b.n	b5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b580a:	bf00      	nop
   b580c:	fffffef2 	.word	0xfffffef2

000b5810 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5814:	2600      	movs	r6, #0
   b5816:	6006      	str	r6, [r0, #0]
   b5818:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b581a:	2028      	movs	r0, #40	; 0x28
   b581c:	460c      	mov	r4, r1
   b581e:	f7fe fc38 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5822:	1e05      	subs	r5, r0, #0
   b5824:	f105 080c 	add.w	r8, r5, #12
   b5828:	d00f      	beq.n	b584a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b582a:	2301      	movs	r3, #1
   b582c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5830:	4b08      	ldr	r3, [pc, #32]	; (b5854 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5832:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5834:	4640      	mov	r0, r8
   b5836:	f7ff fe67 	bl	b5508 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b583a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b583c:	622e      	str	r6, [r5, #32]
   b583e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5842:	4646      	mov	r6, r8
   b5844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5846:	6823      	ldr	r3, [r4, #0]
   b5848:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b584a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b584e:	4638      	mov	r0, r7
   b5850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5854:	000b717c 	.word	0x000b717c

000b5858 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5858:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b585a:	2500      	movs	r5, #0
   b585c:	6005      	str	r5, [r0, #0]
   b585e:	4606      	mov	r6, r0
   b5860:	2030      	movs	r0, #48	; 0x30
   b5862:	f7fe fc16 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5866:	4604      	mov	r4, r0
   b5868:	b188      	cbz	r0, b588e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b586a:	2301      	movs	r3, #1
   b586c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5870:	4b09      	ldr	r3, [pc, #36]	; (b5898 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5872:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5874:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5878:	8183      	strh	r3, [r0, #12]
   b587a:	300e      	adds	r0, #14
   b587c:	f7ff fe39 	bl	b54f2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5880:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5884:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5888:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b588c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b588e:	6074      	str	r4, [r6, #4]
   b5890:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5892:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5894:	4630      	mov	r0, r6
   b5896:	bd70      	pop	{r4, r5, r6, pc}
   b5898:	000b7198 	.word	0x000b7198

000b589c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b589c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b589e:	460d      	mov	r5, r1
   b58a0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b58a2:	a801      	add	r0, sp, #4
   b58a4:	f7ff fdea 	bl	b547c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b58a8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b58aa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b58ae:	6023      	str	r3, [r4, #0]
   b58b0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b58b4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b58b6:	a801      	add	r0, sp, #4
   b58b8:	f7ff fdee 	bl	b5498 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b58bc:	4620      	mov	r0, r4
   b58be:	b003      	add	sp, #12
   b58c0:	bd30      	pop	{r4, r5, pc}

000b58c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b58c2:	b530      	push	{r4, r5, lr}
   b58c4:	4605      	mov	r5, r0
   b58c6:	b087      	sub	sp, #28
   b58c8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b58ca:	a801      	add	r0, sp, #4
   b58cc:	f7ff fdd6 	bl	b547c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b58d0:	682a      	ldr	r2, [r5, #0]
   b58d2:	6823      	ldr	r3, [r4, #0]
   b58d4:	8812      	ldrh	r2, [r2, #0]
   b58d6:	881b      	ldrh	r3, [r3, #0]
   b58d8:	429a      	cmp	r2, r3
   b58da:	d10d      	bne.n	b58f8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b58dc:	4629      	mov	r1, r5
   b58de:	a802      	add	r0, sp, #8
   b58e0:	f7ff ffdc 	bl	b589c <_ZNK8particle13BlePeerDevice7addressEv>
   b58e4:	4621      	mov	r1, r4
   b58e6:	a804      	add	r0, sp, #16
   b58e8:	f7ff ffd8 	bl	b589c <_ZNK8particle13BlePeerDevice7addressEv>
   b58ec:	a904      	add	r1, sp, #16
   b58ee:	a802      	add	r0, sp, #8
   b58f0:	f7ff fdeb 	bl	b54ca <_ZNK8particle10BleAddresseqERKS0_>
   b58f4:	4604      	mov	r4, r0
   b58f6:	b900      	cbnz	r0, b58fa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b58f8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b58fa:	a801      	add	r0, sp, #4
   b58fc:	f7ff fdcc 	bl	b5498 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5900:	4620      	mov	r0, r4
   b5902:	b007      	add	sp, #28
   b5904:	bd30      	pop	{r4, r5, pc}
	...

000b5908 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5908:	b510      	push	{r4, lr}
   b590a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b590c:	2064      	movs	r0, #100	; 0x64
   b590e:	f7fe fbc0 	bl	b4092 <_Znwj>
   b5912:	b168      	cbz	r0, b5930 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5914:	2300      	movs	r3, #0
   b5916:	e9c0 3300 	strd	r3, r3, [r0]
   b591a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b591e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5922:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5926:	6203      	str	r3, [r0, #32]
   b5928:	62c3      	str	r3, [r0, #44]	; 0x2c
   b592a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b592c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b592e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5930:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5932:	b920      	cbnz	r0, b593e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b5934:	4a0a      	ldr	r2, [pc, #40]	; (b5960 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5936:	490b      	ldr	r1, [pc, #44]	; (b5964 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5938:	200a      	movs	r0, #10
   b593a:	f7fe fff5 	bl	b4928 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b593e:	2000      	movs	r0, #0
   b5940:	f7fe ff50 	bl	b47e4 <hal_ble_stack_init>
   b5944:	b120      	cbz	r0, b5950 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5946:	4a06      	ldr	r2, [pc, #24]	; (b5960 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5948:	4907      	ldr	r1, [pc, #28]	; (b5968 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b594a:	200a      	movs	r0, #10
   b594c:	f7fe ffec 	bl	b4928 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5950:	6821      	ldr	r1, [r4, #0]
   b5952:	4806      	ldr	r0, [pc, #24]	; (b596c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5954:	2200      	movs	r2, #0
   b5956:	f7fe ffa1 	bl	b489c <hal_ble_set_callback_on_periph_link_events>
}
   b595a:	4620      	mov	r0, r4
   b595c:	bd10      	pop	{r4, pc}
   b595e:	bf00      	nop
   b5960:	000b48e9 	.word	0x000b48e9
   b5964:	000b700c 	.word	0x000b700c
   b5968:	000b704a 	.word	0x000b704a
   b596c:	000b5ef1 	.word	0x000b5ef1

000b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5970:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5972:	4c0a      	ldr	r4, [pc, #40]	; (b599c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5974:	7823      	ldrb	r3, [r4, #0]
   b5976:	f3bf 8f5b 	dmb	ish
   b597a:	07db      	lsls	r3, r3, #31
   b597c:	d40c      	bmi.n	b5998 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b597e:	4620      	mov	r0, r4
   b5980:	f7fe fb8d 	bl	b409e <__cxa_guard_acquire>
   b5984:	b140      	cbz	r0, b5998 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5986:	4806      	ldr	r0, [pc, #24]	; (b59a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5988:	f7ff ffbe 	bl	b5908 <_ZN8particle14BleLocalDeviceC1Ev>
   b598c:	4620      	mov	r0, r4
   b598e:	f7fe fb8b 	bl	b40a8 <__cxa_guard_release>
   b5992:	4804      	ldr	r0, [pc, #16]	; (b59a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5994:	f001 f928 	bl	b6be8 <atexit>
    return instance;
}
   b5998:	4801      	ldr	r0, [pc, #4]	; (b59a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b599a:	bd10      	pop	{r4, pc}
   b599c:	2003e700 	.word	0x2003e700
   b59a0:	2003e70c 	.word	0x2003e70c
   b59a4:	000b5bb9 	.word	0x000b5bb9

000b59a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b59a8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b59aa:	6803      	ldr	r3, [r0, #0]
   b59ac:	3b09      	subs	r3, #9
   b59ae:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b59b0:	b08d      	sub	sp, #52	; 0x34
   b59b2:	4604      	mov	r4, r0
   b59b4:	460d      	mov	r5, r1
    switch (event->type) {
   b59b6:	d811      	bhi.n	b59dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b59b8:	f7ff ffda 	bl	b5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59bc:	88a1      	ldrh	r1, [r4, #4]
   b59be:	6800      	ldr	r0, [r0, #0]
   b59c0:	f7ff feb4 	bl	b572c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b59c4:	4603      	mov	r3, r0
   b59c6:	b958      	cbnz	r0, b59e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b59c8:	2220      	movs	r2, #32
   b59ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b59ce:	4a0b      	ldr	r2, [pc, #44]	; (b59fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b59d0:	9200      	str	r2, [sp, #0]
   b59d2:	490b      	ldr	r1, [pc, #44]	; (b5a00 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b59d4:	aa04      	add	r2, sp, #16
   b59d6:	2032      	movs	r0, #50	; 0x32
   b59d8:	f7fe ffae 	bl	b4938 <log_message>
}
   b59dc:	b00d      	add	sp, #52	; 0x34
   b59de:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b59e0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b59e2:	2a00      	cmp	r2, #0
   b59e4:	d0fa      	beq.n	b59dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b59e6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b59ea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b59ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b59f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b59f4:	aa04      	add	r2, sp, #16
   b59f6:	a903      	add	r1, sp, #12
   b59f8:	47a0      	blx	r4
}
   b59fa:	e7ef      	b.n	b59dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b59fc:	000b708c 	.word	0x000b708c
   b5a00:	000b7023 	.word	0x000b7023

000b5a04 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5a04:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5a06:	2000      	movs	r0, #0
   b5a08:	f7fe feec 	bl	b47e4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5a0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5a10:	bd08      	pop	{r3, pc}

000b5a12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5a12:	b919      	cbnz	r1, b5a1c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5a14:	460a      	mov	r2, r1
   b5a16:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5a18:	f7fe beec 	b.w	b47f4 <hal_ble_gap_set_advertising_data>
   b5a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5a20:	2200      	movs	r2, #0
   b5a22:	e7f9      	b.n	b5a18 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5a24 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b5a24:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b5a26:	69d8      	ldr	r0, [r3, #28]
}
   b5a28:	2800      	cmp	r0, #0
   b5a2a:	bfd4      	ite	le
   b5a2c:	2000      	movle	r0, #0
   b5a2e:	2001      	movgt	r0, #1
   b5a30:	4770      	bx	lr

000b5a32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5a32:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5a34:	1e14      	subs	r4, r2, #0
   b5a36:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5a38:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5a3a:	db02      	blt.n	b5a42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5a3c:	1862      	adds	r2, r4, r1
   b5a3e:	429a      	cmp	r2, r3
   b5a40:	dd00      	ble.n	b5a44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5a42:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5a44:	682a      	ldr	r2, [r5, #0]
   b5a46:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5a48:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5a4a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a4c:	1a52      	subs	r2, r2, r1
   b5a4e:	f001 f8ef 	bl	b6c30 <memmove>
    size_ -= n;
   b5a52:	686a      	ldr	r2, [r5, #4]
   b5a54:	1b12      	subs	r2, r2, r4
   b5a56:	606a      	str	r2, [r5, #4]
}
   b5a58:	bd38      	pop	{r3, r4, r5, pc}

000b5a5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5a5c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5a5e:	4604      	mov	r4, r0
   b5a60:	460d      	mov	r5, r1
   b5a62:	ab01      	add	r3, sp, #4
   b5a64:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5a68:	f7ff fc9c 	bl	b53a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5a6c:	4602      	mov	r2, r0
   b5a6e:	b138      	cbz	r0, b5a80 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5a70:	9901      	ldr	r1, [sp, #4]
   b5a72:	4620      	mov	r0, r4
   b5a74:	f7ff ffdd 	bl	b5a32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5a78:	4629      	mov	r1, r5
   b5a7a:	4620      	mov	r0, r4
   b5a7c:	f7ff ffed 	bl	b5a5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5a80:	b003      	add	sp, #12
   b5a82:	bd30      	pop	{r4, r5, pc}

000b5a84 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5a84:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5a86:	460c      	mov	r4, r1
   b5a88:	b929      	cbnz	r1, b5a96 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5a8a:	460a      	mov	r2, r1
   b5a8c:	4608      	mov	r0, r1
}
   b5a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5a92:	f7fe beb7 	b.w	b4804 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5a96:	2101      	movs	r1, #1
   b5a98:	4620      	mov	r0, r4
   b5a9a:	f7ff ffde 	bl	b5a5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5a9e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5aa2:	2200      	movs	r2, #0
   b5aa4:	e7f3      	b.n	b5a8e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5aa6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5aa6:	b538      	push	{r3, r4, r5, lr}
   b5aa8:	4604      	mov	r4, r0
   b5aaa:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5aac:	f7ff ffb1 	bl	b5a12 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b5ab0:	2800      	cmp	r0, #0
   b5ab2:	db0a      	blt.n	b5aca <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5ab4:	4629      	mov	r1, r5
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	f7ff ffe4 	bl	b5a84 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5abc:	2800      	cmp	r0, #0
   b5abe:	db04      	blt.n	b5aca <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b5ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5ac4:	2000      	movs	r0, #0
   b5ac6:	f7fe bea5 	b.w	b4814 <hal_ble_gap_start_advertising>
}
   b5aca:	bd38      	pop	{r3, r4, r5, pc}

000b5acc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5acc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5ace:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5ad0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5ad2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ad4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5ad6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ad8:	f7fe fadb 	bl	b4092 <_Znwj>
   b5adc:	b118      	cbz	r0, b5ae6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5ade:	682b      	ldr	r3, [r5, #0]
   b5ae0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5ae2:	686b      	ldr	r3, [r5, #4]
   b5ae4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ae6:	4b03      	ldr	r3, [pc, #12]	; (b5af4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5ae8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5aea:	4b03      	ldr	r3, [pc, #12]	; (b5af8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5aec:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5aee:	60a3      	str	r3, [r4, #8]
      }
   b5af0:	4620      	mov	r0, r4
   b5af2:	bd38      	pop	{r3, r4, r5, pc}
   b5af4:	000b53e5 	.word	0x000b53e5
   b5af8:	000b53fd 	.word	0x000b53fd

000b5afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5afc:	680b      	ldr	r3, [r1, #0]
   b5afe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5b00:	b113      	cbz	r3, b5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5b02:	685a      	ldr	r2, [r3, #4]
   b5b04:	3201      	adds	r2, #1
   b5b06:	605a      	str	r2, [r3, #4]
      }
   b5b08:	4770      	bx	lr

000b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5b0a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5b0c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5b10:	4604      	mov	r4, r0
   b5b12:	f840 3b04 	str.w	r3, [r0], #4
   b5b16:	f7ff fff1 	bl	b5afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5b1a:	6823      	ldr	r3, [r4, #0]
   b5b1c:	b90b      	cbnz	r3, b5b22 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5b1e:	f7ff fc57 	bl	b53d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5b22:	4620      	mov	r0, r4
   b5b24:	bd10      	pop	{r4, pc}

000b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5b26:	b510      	push	{r4, lr}
   b5b28:	f851 3b04 	ldr.w	r3, [r1], #4
   b5b2c:	4604      	mov	r4, r0
   b5b2e:	f840 3b04 	str.w	r3, [r0], #4
   b5b32:	f7ff ffe3 	bl	b5afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5b36:	4620      	mov	r0, r4
   b5b38:	bd10      	pop	{r4, pc}

000b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5b3a:	b510      	push	{r4, lr}
   b5b3c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5b40:	4604      	mov	r4, r0
   b5b42:	f840 3b04 	str.w	r3, [r0], #4
   b5b46:	f7ff ffd9 	bl	b5afc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	bd10      	pop	{r4, pc}

000b5b4e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5b4e:	b510      	push	{r4, lr}
   b5b50:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5b52:	3004      	adds	r0, #4
   b5b54:	f7fe ffd0 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5b58:	4620      	mov	r0, r4
   b5b5a:	bd10      	pop	{r4, pc}

000b5b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5b5e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5b64:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5b68:	42ae      	cmp	r6, r5
   b5b6a:	d004      	beq.n	b5b76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5b6c:	1d28      	adds	r0, r5, #4
   b5b6e:	f7fe ffc3 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b72:	3508      	adds	r5, #8
   b5b74:	e7f8      	b.n	b5b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5b76:	6820      	ldr	r0, [r4, #0]
   b5b78:	f7fe ff82 	bl	b4a80 <free>
}
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	bd70      	pop	{r4, r5, r6, pc}

000b5b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5b82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5b88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5b8c:	42ae      	cmp	r6, r5
   b5b8e:	d004      	beq.n	b5b9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5b90:	1d28      	adds	r0, r5, #4
   b5b92:	f7fe ffb1 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b96:	3508      	adds	r5, #8
   b5b98:	e7f8      	b.n	b5b8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5b9a:	6820      	ldr	r0, [r4, #0]
   b5b9c:	f7fe ff70 	bl	b4a80 <free>
}
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	bd70      	pop	{r4, r5, r6, pc}

000b5ba4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5ba4:	b510      	push	{r4, lr}
   b5ba6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5ba8:	3024      	adds	r0, #36	; 0x24
   b5baa:	f7ff ffe9 	bl	b5b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5bae:	f104 0018 	add.w	r0, r4, #24
   b5bb2:	f7ff ffd3 	bl	b5b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <__tcf_0>:
    static BleLocalDevice instance;
   b5bb8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5bba:	4b17      	ldr	r3, [pc, #92]	; (b5c18 <__tcf_0+0x60>)
   b5bbc:	681c      	ldr	r4, [r3, #0]
   b5bbe:	b354      	cbz	r4, b5c16 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5bc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5bc4:	f7ff fa6a 	bl	b509c <_ZNSt14_Function_baseD1Ev>
   b5bc8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5bcc:	f7ff fa66 	bl	b509c <_ZNSt14_Function_baseD1Ev>
   b5bd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5bd4:	f7ff fa62 	bl	b509c <_ZNSt14_Function_baseD1Ev>
   b5bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5bdc:	f7ff fa5e 	bl	b509c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5be0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5be4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5be8:	42ae      	cmp	r6, r5
   b5bea:	d004      	beq.n	b5bf6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5bec:	1d28      	adds	r0, r5, #4
   b5bee:	f7fe ff83 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bf2:	3508      	adds	r5, #8
   b5bf4:	e7f8      	b.n	b5be8 <__tcf_0+0x30>
    ::free(ptr);
   b5bf6:	69a0      	ldr	r0, [r4, #24]
   b5bf8:	f7fe ff42 	bl	b4a80 <free>
    ~BleLocalDeviceImpl() = default;
   b5bfc:	f104 000c 	add.w	r0, r4, #12
   b5c00:	f7ff ffbe 	bl	b5b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5c04:	4620      	mov	r0, r4
   b5c06:	f7ff ffa9 	bl	b5b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c12:	f7fe ba42 	b.w	b409a <_ZdlPvj>
   b5c16:	bd70      	pop	{r4, r5, r6, pc}
   b5c18:	2003e70c 	.word	0x2003e70c

000b5c1c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5c1c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5c1e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5c20:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5c24:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b5c28:	6803      	ldr	r3, [r0, #0]
   b5c2a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c2c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5c2e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5c30:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5c32:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5c34:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5c36:	f7fe ff5f 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5c3a:	b002      	add	sp, #8
   b5c3c:	bd10      	pop	{r4, pc}

000b5c3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5c3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5c40:	b510      	push	{r4, lr}
      if (_M_empty())
   b5c42:	b90a      	cbnz	r2, b5c48 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5c44:	f000 feba 	bl	b69bc <_ZSt25__throw_bad_function_callv>
    }
   b5c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5c4c:	68c3      	ldr	r3, [r0, #12]
   b5c4e:	4718      	bx	r3

000b5c50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5c50:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5c52:	6883      	ldr	r3, [r0, #8]
   b5c54:	428b      	cmp	r3, r1
   b5c56:	da02      	bge.n	b5c5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5c58:	f7ff f917 	bl	b4e8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5c5c:	bd08      	pop	{r3, pc}
    return true;
   b5c5e:	2001      	movs	r0, #1
   b5c60:	e7fc      	b.n	b5c5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5c62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c66:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c68:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c6a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c6c:	4419      	add	r1, r3
   b5c6e:	6883      	ldr	r3, [r0, #8]
   b5c70:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5c72:	4604      	mov	r4, r0
   b5c74:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c76:	dc12      	bgt.n	b5c9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5c78:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5c7a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5c7c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5c7e:	1bd2      	subs	r2, r2, r7
   b5c80:	4631      	mov	r1, r6
   b5c82:	1970      	adds	r0, r6, r5
   b5c84:	f000 ffd4 	bl	b6c30 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5c88:	462a      	mov	r2, r5
   b5c8a:	4641      	mov	r1, r8
   b5c8c:	4630      	mov	r0, r6
   b5c8e:	f000 ffc1 	bl	b6c14 <memcpy>
    size_ += n;
   b5c92:	6863      	ldr	r3, [r4, #4]
   b5c94:	442b      	add	r3, r5
   b5c96:	6063      	str	r3, [r4, #4]
    return true;
   b5c98:	2001      	movs	r0, #1
}
   b5c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5c9e:	f7ff f8f4 	bl	b4e8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	d1e8      	bne.n	b5c78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5ca6:	e7f8      	b.n	b5c9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5ca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5caa:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cac:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5cb0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5cb2:	4604      	mov	r4, r0
   b5cb4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cb6:	da0b      	bge.n	b5cd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5cb8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cbc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5cbe:	1b52      	subs	r2, r2, r5
   b5cc0:	1c48      	adds	r0, r1, #1
   b5cc2:	f000 ffb5 	bl	b6c30 <memmove>
    new(p) T(std::move(value));
   b5cc6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5cc8:	6863      	ldr	r3, [r4, #4]
   b5cca:	3301      	adds	r3, #1
   b5ccc:	6063      	str	r3, [r4, #4]
}
   b5cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cd0:	3101      	adds	r1, #1
   b5cd2:	f7ff f8da 	bl	b4e8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5cd6:	2800      	cmp	r0, #0
   b5cd8:	d1ee      	bne.n	b5cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5cda:	e7f8      	b.n	b5cce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5cdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5cdc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5cde:	6841      	ldr	r1, [r0, #4]
   b5ce0:	f7ff bfe2 	b.w	b5ca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5ce8:	4604      	mov	r4, r0
   b5cea:	461d      	mov	r5, r3
   b5cec:	460f      	mov	r7, r1
   b5cee:	ab01      	add	r3, sp, #4
   b5cf0:	4690      	mov	r8, r2
   b5cf2:	460a      	mov	r2, r1
   b5cf4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5cf8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5cfc:	f7ff fb52 	bl	b53a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5d00:	1cae      	adds	r6, r5, #2
   b5d02:	6863      	ldr	r3, [r4, #4]
   b5d04:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5d06:	f1b9 0f00 	cmp.w	r9, #0
   b5d0a:	d126      	bne.n	b5d5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5d0c:	b328      	cbz	r0, b5d5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5d0e:	4433      	add	r3, r6
   b5d10:	1a1b      	subs	r3, r3, r0
   b5d12:	2bff      	cmp	r3, #255	; 0xff
   b5d14:	d809      	bhi.n	b5d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5d16:	9901      	ldr	r1, [sp, #4]
   b5d18:	4620      	mov	r0, r4
   b5d1a:	f7ff fe8a 	bl	b5a32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5d1e:	6861      	ldr	r1, [r4, #4]
   b5d20:	4620      	mov	r0, r4
   b5d22:	4431      	add	r1, r6
   b5d24:	f7ff ff94 	bl	b5c50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5d28:	b918      	cbnz	r0, b5d32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5d2a:	6860      	ldr	r0, [r4, #4]
}
   b5d2c:	b003      	add	sp, #12
   b5d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5d32:	1c6a      	adds	r2, r5, #1
   b5d34:	9901      	ldr	r1, [sp, #4]
   b5d36:	b2d2      	uxtb	r2, r2
   b5d38:	4620      	mov	r0, r4
   b5d3a:	f7ff ffb5 	bl	b5ca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5d3e:	9901      	ldr	r1, [sp, #4]
   b5d40:	463a      	mov	r2, r7
   b5d42:	3101      	adds	r1, #1
   b5d44:	4620      	mov	r0, r4
   b5d46:	f7ff ffaf 	bl	b5ca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5d4a:	9901      	ldr	r1, [sp, #4]
   b5d4c:	462b      	mov	r3, r5
   b5d4e:	4642      	mov	r2, r8
   b5d50:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5d52:	4620      	mov	r0, r4
   b5d54:	f7ff ff85 	bl	b5c62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5d58:	e7e7      	b.n	b5d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5d5a:	18f1      	adds	r1, r6, r3
   b5d5c:	29ff      	cmp	r1, #255	; 0xff
   b5d5e:	d8e4      	bhi.n	b5d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5d60:	4620      	mov	r0, r4
   b5d62:	f7ff ff75 	bl	b5c50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5d66:	2800      	cmp	r0, #0
   b5d68:	d0df      	beq.n	b5d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5d6a:	1c69      	adds	r1, r5, #1
   b5d6c:	b2c9      	uxtb	r1, r1
   b5d6e:	4620      	mov	r0, r4
   b5d70:	f7ff ffb4 	bl	b5cdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5d74:	4639      	mov	r1, r7
   b5d76:	4620      	mov	r0, r4
   b5d78:	f7ff ffb0 	bl	b5cdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5d7c:	6861      	ldr	r1, [r4, #4]
   b5d7e:	462b      	mov	r3, r5
   b5d80:	4642      	mov	r2, r8
   b5d82:	e7e6      	b.n	b5d52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5d84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5d84:	b430      	push	{r4, r5}
   b5d86:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5d8a:	b11a      	cbz	r2, b5d94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5d8c:	9502      	str	r5, [sp, #8]
}
   b5d8e:	bc30      	pop	{r4, r5}
   b5d90:	f7ff bfa8 	b.w	b5ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5d94:	6840      	ldr	r0, [r0, #4]
}
   b5d96:	bc30      	pop	{r4, r5}
   b5d98:	4770      	bx	lr

000b5d9a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5d9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5d9c:	2300      	movs	r3, #0
   b5d9e:	e9c0 3300 	strd	r3, r3, [r0]
   b5da2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5da4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5da6:	9300      	str	r3, [sp, #0]
   b5da8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5daa:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5dae:	4619      	mov	r1, r3
   b5db0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5db4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5db6:	f7ff ffe5 	bl	b5d84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5dba:	4620      	mov	r0, r4
   b5dbc:	b004      	add	sp, #16
   b5dbe:	bd10      	pop	{r4, pc}

000b5dc0 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b5dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5dc2:	460a      	mov	r2, r1
   b5dc4:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b5dc6:	2114      	movs	r1, #20
   b5dc8:	4610      	mov	r0, r2
   b5dca:	9203      	str	r2, [sp, #12]
   b5dcc:	f000 ffad 	bl	b6d2a <strnlen>
   b5dd0:	2100      	movs	r1, #0
   b5dd2:	4603      	mov	r3, r0
   b5dd4:	9100      	str	r1, [sp, #0]
   b5dd6:	9a03      	ldr	r2, [sp, #12]
   b5dd8:	2109      	movs	r1, #9
   b5dda:	4620      	mov	r0, r4
   b5ddc:	f7ff ffd2 	bl	b5d84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5de0:	b004      	add	sp, #16
   b5de2:	bd10      	pop	{r4, pc}

000b5de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5de4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5de8:	4604      	mov	r4, r0
   b5dea:	460d      	mov	r5, r1
   b5dec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5dee:	d914      	bls.n	b5e1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5df0:	4290      	cmp	r0, r2
   b5df2:	d213      	bcs.n	b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5df4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5df8:	1a75      	subs	r5, r6, r1
   b5dfa:	f1a1 0708 	sub.w	r7, r1, #8
   b5dfe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5e00:	42b7      	cmp	r7, r6
   b5e02:	d018      	beq.n	b5e36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5e04:	b11c      	cbz	r4, b5e0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5e06:	4631      	mov	r1, r6
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f7ff fe96 	bl	b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5e0e:	1d30      	adds	r0, r6, #4
   b5e10:	f7fe fe72 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5e14:	3e08      	subs	r6, #8
   b5e16:	3c08      	subs	r4, #8
   b5e18:	e7f2      	b.n	b5e00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5e1a:	d00c      	beq.n	b5e36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5e1c:	42b5      	cmp	r5, r6
   b5e1e:	d00a      	beq.n	b5e36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5e20:	b11c      	cbz	r4, b5e2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5e22:	4629      	mov	r1, r5
   b5e24:	4620      	mov	r0, r4
   b5e26:	f7ff fe88 	bl	b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e2a:	1d28      	adds	r0, r5, #4
   b5e2c:	f7fe fe64 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5e30:	3508      	adds	r5, #8
   b5e32:	3408      	adds	r4, #8
   b5e34:	e7f2      	b.n	b5e1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5e3a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5e3c:	6846      	ldr	r6, [r0, #4]
   b5e3e:	4668      	mov	r0, sp
   b5e40:	f7ff fe7b 	bl	b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e44:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5e48:	429f      	cmp	r7, r3
   b5e4a:	db12      	blt.n	b5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5e4c:	3701      	adds	r7, #1
        if (n > 0) {
   b5e4e:	2f00      	cmp	r7, #0
   b5e50:	dd29      	ble.n	b5ea6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5e52:	00f8      	lsls	r0, r7, #3
   b5e54:	f7fe fe0c 	bl	b4a70 <malloc>
            if (!d) {
   b5e58:	4605      	mov	r5, r0
   b5e5a:	b1f0      	cbz	r0, b5e9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5e5c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5e60:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5e64:	f7ff ffbe 	bl	b5de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5e68:	6820      	ldr	r0, [r4, #0]
   b5e6a:	f7fe fe09 	bl	b4a80 <free>
        data_ = d;
   b5e6e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5e70:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5e72:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5e74:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5e76:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5e7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5e7e:	4631      	mov	r1, r6
   b5e80:	f106 0008 	add.w	r0, r6, #8
   b5e84:	f7ff ffae 	bl	b5de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5e88:	b11e      	cbz	r6, b5e92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5e8a:	4669      	mov	r1, sp
   b5e8c:	4630      	mov	r0, r6
   b5e8e:	f7ff fe54 	bl	b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5e92:	6863      	ldr	r3, [r4, #4]
   b5e94:	3301      	adds	r3, #1
   b5e96:	6063      	str	r3, [r4, #4]
    return true;
   b5e98:	2501      	movs	r5, #1
   b5e9a:	a801      	add	r0, sp, #4
   b5e9c:	f7fe fe2c 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ea0:	4628      	mov	r0, r5
   b5ea2:	b003      	add	sp, #12
   b5ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5ea6:	2500      	movs	r5, #0
   b5ea8:	e7de      	b.n	b5e68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5eac:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5eb0:	4605      	mov	r5, r0
   b5eb2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5eb4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5eb8:	42a6      	cmp	r6, r4
   b5eba:	d005      	beq.n	b5ec8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5ebc:	4639      	mov	r1, r7
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	f7ff fcff 	bl	b58c2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5ec4:	b108      	cbz	r0, b5eca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5ec6:	b914      	cbnz	r4, b5ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5eca:	3408      	adds	r4, #8
   b5ecc:	e7f4      	b.n	b5eb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5ece:	1d20      	adds	r0, r4, #4
   b5ed0:	f7fe fe12 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5ed4:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5ed8:	f104 0108 	add.w	r1, r4, #8
   b5edc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5ee0:	4620      	mov	r0, r4
   b5ee2:	f7ff ff7f 	bl	b5de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5ee6:	686b      	ldr	r3, [r5, #4]
   b5ee8:	3b01      	subs	r3, #1
   b5eea:	606b      	str	r3, [r5, #4]
    return true;
   b5eec:	e7ec      	b.n	b5ec8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5ef0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ef4:	4605      	mov	r5, r0
   b5ef6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5ef8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5efa:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5efc:	f7ff fabe 	bl	b547c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5f00:	682e      	ldr	r6, [r5, #0]
   b5f02:	1ef3      	subs	r3, r6, #3
   b5f04:	2b0d      	cmp	r3, #13
   b5f06:	d83c      	bhi.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5f08:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5f0c:	0053000e 	.word	0x0053000e
   b5f10:	00d1003b 	.word	0x00d1003b
   b5f14:	003b003b 	.word	0x003b003b
   b5f18:	003b003b 	.word	0x003b003b
   b5f1c:	009b003b 	.word	0x009b003b
   b5f20:	009b009b 	.word	0x009b009b
   b5f24:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b5f28:	a804      	add	r0, sp, #16
   b5f2a:	f7ff fc95 	bl	b5858 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5f2e:	9b04      	ldr	r3, [sp, #16]
   b5f30:	89aa      	ldrh	r2, [r5, #12]
   b5f32:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5f34:	6869      	ldr	r1, [r5, #4]
   b5f36:	9804      	ldr	r0, [sp, #16]
   b5f38:	3108      	adds	r1, #8
   b5f3a:	3002      	adds	r0, #2
   b5f3c:	f7ff fab8 	bl	b54b0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5f40:	a904      	add	r1, sp, #16
   b5f42:	a806      	add	r0, sp, #24
   b5f44:	f7ff fdf9 	bl	b5b3a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5f48:	a906      	add	r1, sp, #24
   b5f4a:	f104 0018 	add.w	r0, r4, #24
   b5f4e:	f7ff ff73 	bl	b5e38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5f52:	4605      	mov	r5, r0
   b5f54:	a807      	add	r0, sp, #28
   b5f56:	f7fe fdcf 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f5a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5f5c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5f5e:	b9b5      	cbnz	r5, b5f8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5f60:	4b5d      	ldr	r3, [pc, #372]	; (b60d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b5f62:	495e      	ldr	r1, [pc, #376]	; (b60dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5f64:	9300      	str	r3, [sp, #0]
   b5f66:	2032      	movs	r0, #50	; 0x32
   b5f68:	462b      	mov	r3, r5
   b5f6a:	aa06      	add	r2, sp, #24
   b5f6c:	9507      	str	r5, [sp, #28]
   b5f6e:	f7fe fce3 	bl	b4938 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5f72:	9b04      	ldr	r3, [sp, #16]
   b5f74:	4629      	mov	r1, r5
   b5f76:	8818      	ldrh	r0, [r3, #0]
   b5f78:	f7fe fc54 	bl	b4824 <hal_ble_gap_disconnect>
   b5f7c:	a805      	add	r0, sp, #20
   b5f7e:	f7fe fdbb 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b5f82:	a803      	add	r0, sp, #12
   b5f84:	f7ff fa88 	bl	b5498 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5f88:	b00e      	add	sp, #56	; 0x38
   b5f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b5f8e:	4a54      	ldr	r2, [pc, #336]	; (b60e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b5f90:	9200      	str	r2, [sp, #0]
   b5f92:	2300      	movs	r3, #0
   b5f94:	4951      	ldr	r1, [pc, #324]	; (b60dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5f96:	9307      	str	r3, [sp, #28]
   b5f98:	aa06      	add	r2, sp, #24
   b5f9a:	2001      	movs	r0, #1
   b5f9c:	f7fe fccc 	bl	b4938 <log_message>
                if (impl->connectedCallback_) {
   b5fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5fa2:	2b00      	cmp	r3, #0
   b5fa4:	d0ea      	beq.n	b5f7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b5fa6:	a904      	add	r1, sp, #16
   b5fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5fac:	f7ff fe47 	bl	b5c3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5fb0:	e7e4      	b.n	b5f7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5fb2:	89a9      	ldrh	r1, [r5, #12]
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	f7ff fbb9 	bl	b572c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5fba:	4606      	mov	r6, r0
   b5fbc:	2800      	cmp	r0, #0
   b5fbe:	d0e0      	beq.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b5fc0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5fc2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5fc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5fca:	8029      	strh	r1, [r5, #0]
   b5fcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5fd0:	429a      	cmp	r2, r3
   b5fd2:	d003      	beq.n	b5fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b5fd4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5fd8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5fda:	e7f9      	b.n	b5fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b5fdc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5fe0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5fe4:	45b8      	cmp	r8, r7
   b5fe6:	d004      	beq.n	b5ff2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b5fe8:	1d38      	adds	r0, r7, #4
   b5fea:	f7fe fd85 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fee:	3708      	adds	r7, #8
   b5ff0:	e7f8      	b.n	b5fe4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b5ff2:	2300      	movs	r3, #0
   b5ff4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5ff6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5ffa:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5ffe:	45b8      	cmp	r8, r7
   b6000:	d004      	beq.n	b600c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b6002:	1d38      	adds	r0, r7, #4
   b6004:	f7fe fd78 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6008:	3708      	adds	r7, #8
   b600a:	e7f8      	b.n	b5ffe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b600c:	2300      	movs	r3, #0
   b600e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6010:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b6012:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6014:	b123      	cbz	r3, b6020 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b6016:	4631      	mov	r1, r6
   b6018:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b601c:	f7ff fe0f 	bl	b5c3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6020:	2300      	movs	r3, #0
   b6022:	2220      	movs	r2, #32
   b6024:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6028:	4a2e      	ldr	r2, [pc, #184]	; (b60e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b602a:	9200      	str	r2, [sp, #0]
   b602c:	492b      	ldr	r1, [pc, #172]	; (b60dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b602e:	aa06      	add	r2, sp, #24
   b6030:	2001      	movs	r0, #1
   b6032:	f7fe fc81 	bl	b4938 <log_message>
                    impl->peers_.removeOne(*peer);
   b6036:	4631      	mov	r1, r6
   b6038:	f104 0018 	add.w	r0, r4, #24
   b603c:	f7ff ff35 	bl	b5eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b6040:	e79f      	b.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6042:	89a9      	ldrh	r1, [r5, #12]
   b6044:	4620      	mov	r0, r4
   b6046:	f7ff fb71 	bl	b572c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b604a:	2800      	cmp	r0, #0
   b604c:	d099      	beq.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b604e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6050:	2b00      	cmp	r3, #0
   b6052:	d096      	beq.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6054:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6056:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6058:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b605c:	d001      	beq.n	b6062 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b605e:	2e10      	cmp	r6, #16
   b6060:	d117      	bne.n	b6092 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b6062:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b6064:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b6066:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6068:	2506      	movs	r5, #6
                        };
   b606a:	f88d 3015 	strb.w	r3, [sp, #21]
   b606e:	9104      	str	r1, [sp, #16]
   b6070:	f88d 2014 	strb.w	r2, [sp, #20]
   b6074:	9006      	str	r0, [sp, #24]
   b6076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b607a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b607c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b6080:	9508      	str	r5, [sp, #32]
   b6082:	e883 0003 	stmia.w	r3, {r0, r1}
   b6086:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6088:	a906      	add	r1, sp, #24
   b608a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b608e:	4798      	blx	r3
   b6090:	e777      	b.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6092:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6094:	bf01      	itttt	eq
   b6096:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6098:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b609a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b609e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b60a0:	bf0f      	iteee	eq
   b60a2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b60a6:	461a      	movne	r2, r3
   b60a8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b60aa:	461d      	movne	r5, r3
   b60ac:	e7dd      	b.n	b606a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b60ae:	89a9      	ldrh	r1, [r5, #12]
   b60b0:	4620      	mov	r0, r4
   b60b2:	f7ff fb3b 	bl	b572c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b60b6:	4601      	mov	r1, r0
   b60b8:	2800      	cmp	r0, #0
   b60ba:	f43f af62 	beq.w	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b60be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b60c0:	2b00      	cmp	r3, #0
   b60c2:	f43f af5e 	beq.w	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b60c6:	686b      	ldr	r3, [r5, #4]
   b60c8:	9306      	str	r3, [sp, #24]
   b60ca:	aa06      	add	r2, sp, #24
   b60cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b60ce:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b60d2:	4798      	blx	r3
   b60d4:	e755      	b.n	b5f82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b60d6:	bf00      	nop
   b60d8:	000b70a4 	.word	0x000b70a4
   b60dc:	000b7023 	.word	0x000b7023
   b60e0:	000b70ca 	.word	0x000b70ca
   b60e4:	000b70e7 	.word	0x000b70e7

000b60e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b60e8:	b538      	push	{r3, r4, r5, lr}
   b60ea:	4605      	mov	r5, r0
   b60ec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b60ee:	f7fe ffde 	bl	b50ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60f2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b60f4:	68a2      	ldr	r2, [r4, #8]
   b60f6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b60f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b60fa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b60fc:	68e2      	ldr	r2, [r4, #12]
   b60fe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6100:	60e3      	str	r3, [r4, #12]
      }
   b6102:	bd38      	pop	{r3, r4, r5, pc}

000b6104 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6104:	b570      	push	{r4, r5, r6, lr}
   b6106:	4604      	mov	r4, r0
   b6108:	b08c      	sub	sp, #48	; 0x30
   b610a:	460e      	mov	r6, r1
   b610c:	9201      	str	r2, [sp, #4]
   b610e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6110:	f7ff faec 	bl	b56ec <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6114:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6116:	9901      	ldr	r1, [sp, #4]
   b6118:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b611c:	f000 fad3 	bl	b66c6 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6120:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6124:	b1cd      	cbz	r5, b615a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6126:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6128:	9502      	str	r5, [sp, #8]
   b612a:	a902      	add	r1, sp, #8
   b612c:	a804      	add	r0, sp, #16
   b612e:	9303      	str	r3, [sp, #12]
   b6130:	f7ff fccc 	bl	b5acc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6134:	2300      	movs	r3, #0
	__x.swap(*this);
   b6136:	a908      	add	r1, sp, #32
   b6138:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b613a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b613c:	f7ff ffd4 	bl	b60e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6140:	4631      	mov	r1, r6
   b6142:	a808      	add	r0, sp, #32
   b6144:	f7ff ffd0 	bl	b60e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6148:	a808      	add	r0, sp, #32
   b614a:	f7fe ffa7 	bl	b509c <_ZNSt14_Function_baseD1Ev>
   b614e:	a804      	add	r0, sp, #16
   b6150:	f7fe ffa4 	bl	b509c <_ZNSt14_Function_baseD1Ev>
    }
   b6154:	4620      	mov	r0, r4
   b6156:	b00c      	add	sp, #48	; 0x30
   b6158:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b615a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b615c:	e7ea      	b.n	b6134 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6164:	b087      	sub	sp, #28
   b6166:	461d      	mov	r5, r3
   b6168:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b616c:	4680      	mov	r8, r0
   b616e:	468b      	mov	fp, r1
   b6170:	4692      	mov	sl, r2
   b6172:	9912      	ldr	r1, [sp, #72]	; 0x48
   b6174:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6176:	2200      	movs	r2, #0
   b6178:	2068      	movs	r0, #104	; 0x68
   b617a:	9102      	str	r1, [sp, #8]
   b617c:	9204      	str	r2, [sp, #16]
   b617e:	f7fd ff88 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6182:	1e06      	subs	r6, r0, #0
   b6184:	f106 090c 	add.w	r9, r6, #12
   b6188:	d018      	beq.n	b61bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b618a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b618c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b618e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6192:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6194:	4a15      	ldr	r2, [pc, #84]	; (b61ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6196:	f847 2b20 	str.w	r2, [r7], #32
   b619a:	9b03      	ldr	r3, [sp, #12]
   b619c:	9100      	str	r1, [sp, #0]
   b619e:	465a      	mov	r2, fp
   b61a0:	4651      	mov	r1, sl
   b61a2:	4648      	mov	r0, r9
   b61a4:	f7ff ffae 	bl	b6104 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b61a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61aa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b61ac:	682b      	ldr	r3, [r5, #0]
   b61ae:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b61b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b61b2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b61b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b61b8:	6823      	ldr	r3, [r4, #0]
   b61ba:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b61bc:	a904      	add	r1, sp, #16
   b61be:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b61c0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b61c4:	f7ff fd2a 	bl	b5c1c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b61c8:	a805      	add	r0, sp, #20
   b61ca:	f7fe fc95 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b61ce:	f8d8 3000 	ldr.w	r3, [r8]
   b61d2:	b93b      	cbnz	r3, b61e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b61d4:	4a06      	ldr	r2, [pc, #24]	; (b61f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b61d6:	4907      	ldr	r1, [pc, #28]	; (b61f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b61d8:	200a      	movs	r0, #10
}
   b61da:	b007      	add	sp, #28
   b61dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b61e0:	f7fe bba2 	b.w	b4928 <panic_>
}
   b61e4:	b007      	add	sp, #28
   b61e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61ea:	bf00      	nop
   b61ec:	000b7160 	.word	0x000b7160
   b61f0:	000b48e9 	.word	0x000b48e9
   b61f4:	000b700c 	.word	0x000b700c

000b61f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b61f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b61fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61fc:	4604      	mov	r4, r0
   b61fe:	460d      	mov	r5, r1
   b6200:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6202:	d914      	bls.n	b622e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6204:	4290      	cmp	r0, r2
   b6206:	d213      	bcs.n	b6230 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6208:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b620c:	1a75      	subs	r5, r6, r1
   b620e:	f1a1 0708 	sub.w	r7, r1, #8
   b6212:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6214:	42b7      	cmp	r7, r6
   b6216:	d018      	beq.n	b624a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6218:	b11c      	cbz	r4, b6222 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b621a:	4631      	mov	r1, r6
   b621c:	4620      	mov	r0, r4
   b621e:	f7ff fc82 	bl	b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6222:	1d30      	adds	r0, r6, #4
   b6224:	f7fe fc68 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6228:	3e08      	subs	r6, #8
   b622a:	3c08      	subs	r4, #8
   b622c:	e7f2      	b.n	b6214 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b622e:	d00c      	beq.n	b624a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6230:	42b5      	cmp	r5, r6
   b6232:	d00a      	beq.n	b624a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6234:	b11c      	cbz	r4, b623e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6236:	4629      	mov	r1, r5
   b6238:	4620      	mov	r0, r4
   b623a:	f7ff fc74 	bl	b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b623e:	1d28      	adds	r0, r5, #4
   b6240:	f7fe fc5a 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6244:	3508      	adds	r5, #8
   b6246:	3408      	adds	r4, #8
   b6248:	e7f2      	b.n	b6230 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b624c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b624c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b624e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6250:	4605      	mov	r5, r0
        if (n > 0) {
   b6252:	dd11      	ble.n	b6278 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6254:	00f0      	lsls	r0, r6, #3
   b6256:	f7fe fc0b 	bl	b4a70 <malloc>
            if (!d) {
   b625a:	4604      	mov	r4, r0
   b625c:	b158      	cbz	r0, b6276 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b625e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6262:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6266:	f7ff ffc7 	bl	b61f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b626a:	6828      	ldr	r0, [r5, #0]
   b626c:	f7fe fc08 	bl	b4a80 <free>
        data_ = d;
   b6270:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6272:	60ae      	str	r6, [r5, #8]
        return true;
   b6274:	2001      	movs	r0, #1
    }
   b6276:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6278:	2400      	movs	r4, #0
   b627a:	e7f6      	b.n	b626a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b627c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b627c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b627e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6280:	6845      	ldr	r5, [r0, #4]
   b6282:	4668      	mov	r0, sp
   b6284:	f7ff fc4f 	bl	b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6288:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b628c:	4299      	cmp	r1, r3
   b628e:	da10      	bge.n	b62b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6290:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6292:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6294:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6298:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b629c:	4629      	mov	r1, r5
   b629e:	f105 0008 	add.w	r0, r5, #8
   b62a2:	f7ff ffa9 	bl	b61f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b62a6:	b98d      	cbnz	r5, b62cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b62a8:	6863      	ldr	r3, [r4, #4]
   b62aa:	3301      	adds	r3, #1
   b62ac:	6063      	str	r3, [r4, #4]
    return true;
   b62ae:	2601      	movs	r6, #1
   b62b0:	e006      	b.n	b62c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b62b2:	3101      	adds	r1, #1
   b62b4:	4620      	mov	r0, r4
   b62b6:	f7ff ffc9 	bl	b624c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b62ba:	4606      	mov	r6, r0
   b62bc:	2800      	cmp	r0, #0
   b62be:	d1e7      	bne.n	b6290 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b62c0:	a801      	add	r0, sp, #4
   b62c2:	f7fe fc19 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b62c6:	4630      	mov	r0, r6
   b62c8:	b002      	add	sp, #8
   b62ca:	bd70      	pop	{r4, r5, r6, pc}
   b62cc:	4669      	mov	r1, sp
   b62ce:	4628      	mov	r0, r5
   b62d0:	f7ff fc29 	bl	b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b62d4:	e7e8      	b.n	b62a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b62d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b62d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b62d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62da:	4604      	mov	r4, r0
   b62dc:	460d      	mov	r5, r1
   b62de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b62e0:	d914      	bls.n	b630c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b62e2:	4290      	cmp	r0, r2
   b62e4:	d213      	bcs.n	b630e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b62e6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b62ea:	1a75      	subs	r5, r6, r1
   b62ec:	f1a1 0708 	sub.w	r7, r1, #8
   b62f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b62f2:	42b7      	cmp	r7, r6
   b62f4:	d018      	beq.n	b6328 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b62f6:	b11c      	cbz	r4, b6300 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b62f8:	4631      	mov	r1, r6
   b62fa:	4620      	mov	r0, r4
   b62fc:	f7ff fc05 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6300:	1d30      	adds	r0, r6, #4
   b6302:	f7fe fbf9 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6306:	3e08      	subs	r6, #8
   b6308:	3c08      	subs	r4, #8
   b630a:	e7f2      	b.n	b62f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b630c:	d00c      	beq.n	b6328 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b630e:	42b5      	cmp	r5, r6
   b6310:	d00a      	beq.n	b6328 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6312:	b11c      	cbz	r4, b631c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6314:	4629      	mov	r1, r5
   b6316:	4620      	mov	r0, r4
   b6318:	f7ff fbf7 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b631c:	1d28      	adds	r0, r5, #4
   b631e:	f7fe fbeb 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6322:	3508      	adds	r5, #8
   b6324:	3408      	adds	r4, #8
   b6326:	e7f2      	b.n	b630e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b632a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b632a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b632c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b632e:	4605      	mov	r5, r0
        if (n > 0) {
   b6330:	dd11      	ble.n	b6356 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6332:	00f0      	lsls	r0, r6, #3
   b6334:	f7fe fb9c 	bl	b4a70 <malloc>
            if (!d) {
   b6338:	4604      	mov	r4, r0
   b633a:	b158      	cbz	r0, b6354 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b633c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6340:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6344:	f7ff ffc7 	bl	b62d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6348:	6828      	ldr	r0, [r5, #0]
   b634a:	f7fe fb99 	bl	b4a80 <free>
        data_ = d;
   b634e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6350:	60ae      	str	r6, [r5, #8]
        return true;
   b6352:	2001      	movs	r0, #1
    }
   b6354:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6356:	2400      	movs	r4, #0
   b6358:	e7f6      	b.n	b6348 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b635a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b635a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b635c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b635e:	6845      	ldr	r5, [r0, #4]
   b6360:	4668      	mov	r0, sp
   b6362:	f7ff fbd2 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6366:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b636a:	4299      	cmp	r1, r3
   b636c:	da10      	bge.n	b6390 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b636e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6370:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6372:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6376:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b637a:	4629      	mov	r1, r5
   b637c:	f105 0008 	add.w	r0, r5, #8
   b6380:	f7ff ffa9 	bl	b62d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6384:	b98d      	cbnz	r5, b63aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6386:	6863      	ldr	r3, [r4, #4]
   b6388:	3301      	adds	r3, #1
   b638a:	6063      	str	r3, [r4, #4]
    return true;
   b638c:	2601      	movs	r6, #1
   b638e:	e006      	b.n	b639e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6390:	3101      	adds	r1, #1
   b6392:	4620      	mov	r0, r4
   b6394:	f7ff ffc9 	bl	b632a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6398:	4606      	mov	r6, r0
   b639a:	2800      	cmp	r0, #0
   b639c:	d1e7      	bne.n	b636e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b639e:	a801      	add	r0, sp, #4
   b63a0:	f7fe fbaa 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b63a4:	4630      	mov	r0, r6
   b63a6:	b002      	add	sp, #8
   b63a8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b63aa:	4669      	mov	r1, sp
   b63ac:	4628      	mov	r0, r5
   b63ae:	f7ff fbac 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b63b2:	e7e8      	b.n	b6386 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b63b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b63b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b63b8:	4617      	mov	r7, r2
   b63ba:	b0a1      	sub	sp, #132	; 0x84
   b63bc:	4680      	mov	r8, r0
    WiringBleLock lk;
   b63be:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b63c0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b63c2:	f7ff f85b 	bl	b547c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b63c6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b63c8:	7923      	ldrb	r3, [r4, #4]
   b63ca:	b953      	cbnz	r3, b63e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b63cc:	4639      	mov	r1, r7
   b63ce:	4640      	mov	r0, r8
   b63d0:	f7ff fb9b 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b63d4:	a80a      	add	r0, sp, #40	; 0x28
   b63d6:	f7ff f85f 	bl	b5498 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b63da:	4640      	mov	r0, r8
   b63dc:	b021      	add	sp, #132	; 0x84
   b63de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b63e2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b63e4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b63e8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b63ec:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b63ee:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b63f2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b63f6:	9b03      	ldr	r3, [sp, #12]
   b63f8:	429d      	cmp	r5, r3
   b63fa:	d021      	beq.n	b6440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b63fc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6400:	4658      	mov	r0, fp
   b6402:	f109 0114 	add.w	r1, r9, #20
   b6406:	f7ff f8e6 	bl	b55d6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b640a:	b1b8      	cbz	r0, b643c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b640c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6410:	4650      	mov	r0, sl
   b6412:	f7ff f8e0 	bl	b55d6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6416:	b188      	cbz	r0, b643c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6418:	6823      	ldr	r3, [r4, #0]
   b641a:	f8d9 2000 	ldr.w	r2, [r9]
   b641e:	4053      	eors	r3, r2
   b6420:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6424:	d10a      	bne.n	b643c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6426:	2220      	movs	r2, #32
   b6428:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b642c:	4a5e      	ldr	r2, [pc, #376]	; (b65a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b642e:	9200      	str	r2, [sp, #0]
   b6430:	aa15      	add	r2, sp, #84	; 0x54
   b6432:	495e      	ldr	r1, [pc, #376]	; (b65ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6434:	2032      	movs	r0, #50	; 0x32
   b6436:	f7fe fa7f 	bl	b4938 <log_message>
   b643a:	e7c7      	b.n	b63cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b643c:	3508      	adds	r5, #8
   b643e:	e7da      	b.n	b63f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6440:	4650      	mov	r0, sl
   b6442:	f7ff f899 	bl	b5578 <_ZNK8particle7BleUuid7isValidEv>
   b6446:	b960      	cbnz	r0, b6462 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b6448:	4959      	ldr	r1, [pc, #356]	; (b65b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b644a:	2201      	movs	r2, #1
   b644c:	a815      	add	r0, sp, #84	; 0x54
   b644e:	ad15      	add	r5, sp, #84	; 0x54
   b6450:	f7ff f86a 	bl	b5528 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b6454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6456:	46d4      	mov	ip, sl
   b6458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b645c:	682b      	ldr	r3, [r5, #0]
   b645e:	f8cc 3000 	str.w	r3, [ip]
   b6462:	6833      	ldr	r3, [r6, #0]
   b6464:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6468:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b646c:	455d      	cmp	r5, fp
   b646e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6470:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b6472:	d06e      	beq.n	b6552 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b6474:	f855 0b08 	ldr.w	r0, [r5], #8
   b6478:	f7ff f8ad 	bl	b55d6 <_ZNK8particle7BleUuideqERKS0_>
   b647c:	2800      	cmp	r0, #0
   b647e:	d0f5      	beq.n	b646c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6480:	f104 0a14 	add.w	sl, r4, #20
   b6484:	4650      	mov	r0, sl
   b6486:	f7ff f877 	bl	b5578 <_ZNK8particle7BleUuid7isValidEv>
   b648a:	b988      	cbnz	r0, b64b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b648c:	4b49      	ldr	r3, [pc, #292]	; (b65b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b648e:	4948      	ldr	r1, [pc, #288]	; (b65b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6490:	881a      	ldrh	r2, [r3, #0]
   b6492:	3201      	adds	r2, #1
   b6494:	b292      	uxth	r2, r2
   b6496:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6498:	a815      	add	r0, sp, #84	; 0x54
   b649a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b649c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b649e:	f7ff f862 	bl	b5566 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b64a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b64a4:	46d4      	mov	ip, sl
   b64a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b64aa:	682b      	ldr	r3, [r5, #0]
   b64ac:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b64b0:	4b41      	ldr	r3, [pc, #260]	; (b65b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b64b2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b64b4:	2228      	movs	r2, #40	; 0x28
   b64b6:	2100      	movs	r1, #0
   b64b8:	a816      	add	r0, sp, #88	; 0x58
   b64ba:	f000 fbd3 	bl	b6c64 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b64be:	4651      	mov	r1, sl
   b64c0:	a804      	add	r0, sp, #16
   b64c2:	f7ff f86b 	bl	b559c <_ZN8particle7BleUuid7halUUIDEv>
   b64c6:	ab04      	add	r3, sp, #16
   b64c8:	aa18      	add	r2, sp, #96	; 0x60
   b64ca:	f10d 0c20 	add.w	ip, sp, #32
   b64ce:	6818      	ldr	r0, [r3, #0]
   b64d0:	6859      	ldr	r1, [r3, #4]
   b64d2:	4615      	mov	r5, r2
   b64d4:	c503      	stmia	r5!, {r0, r1}
   b64d6:	3308      	adds	r3, #8
   b64d8:	4563      	cmp	r3, ip
   b64da:	462a      	mov	r2, r5
   b64dc:	d1f7      	bne.n	b64ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b64de:	6818      	ldr	r0, [r3, #0]
   b64e0:	6028      	str	r0, [r5, #0]
    return value_;
   b64e2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b64e4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b64e8:	f8d9 3000 	ldr.w	r3, [r9]
   b64ec:	8a9b      	ldrh	r3, [r3, #20]
   b64ee:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b64f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b64f4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b64f6:	4b31      	ldr	r3, [pc, #196]	; (b65bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b64f8:	2200      	movs	r2, #0
   b64fa:	1da1      	adds	r1, r4, #6
   b64fc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b64fe:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6502:	f7fe f9c1 	bl	b4888 <hal_ble_gatt_server_add_characteristic>
   b6506:	2800      	cmp	r0, #0
   b6508:	f47f af60 	bne.w	b63cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b650c:	2301      	movs	r3, #1
   b650e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6510:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b6512:	4639      	mov	r1, r7
        return characteristics_;
   b6514:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6516:	a80d      	add	r0, sp, #52	; 0x34
   b6518:	f7ff faf7 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b651c:	4620      	mov	r0, r4
   b651e:	a90d      	add	r1, sp, #52	; 0x34
   b6520:	f7ff ff1b 	bl	b635a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6524:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6526:	a80e      	add	r0, sp, #56	; 0x38
   b6528:	f7fe fae6 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b652c:	2c00      	cmp	r4, #0
   b652e:	f47f af4d 	bne.w	b63cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b6532:	2320      	movs	r3, #32
   b6534:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6538:	4b21      	ldr	r3, [pc, #132]	; (b65c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b653a:	9300      	str	r3, [sp, #0]
   b653c:	aa0d      	add	r2, sp, #52	; 0x34
   b653e:	4623      	mov	r3, r4
   b6540:	e777      	b.n	b6432 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b6542:	4639      	mov	r1, r7
   b6544:	4640      	mov	r0, r8
   b6546:	f7ff fae0 	bl	b5b0a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b654a:	a80c      	add	r0, sp, #48	; 0x30
   b654c:	f7fe fad4 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6550:	e740      	b.n	b63d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b6552:	a80b      	add	r0, sp, #44	; 0x2c
   b6554:	f7ff f95c 	bl	b5810 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6558:	4651      	mov	r1, sl
   b655a:	a815      	add	r0, sp, #84	; 0x54
   b655c:	f7ff f81e 	bl	b559c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6562:	2300      	movs	r3, #0
   b6564:	3214      	adds	r2, #20
   b6566:	a915      	add	r1, sp, #84	; 0x54
   b6568:	2001      	movs	r0, #1
   b656a:	f7fe f965 	bl	b4838 <hal_ble_gatt_server_add_service>
   b656e:	2800      	cmp	r0, #0
   b6570:	d1e7      	bne.n	b6542 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b6572:	6835      	ldr	r5, [r6, #0]
   b6574:	a90b      	add	r1, sp, #44	; 0x2c
   b6576:	a80d      	add	r0, sp, #52	; 0x34
   b6578:	f7ff fad5 	bl	b5b26 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b657c:	4628      	mov	r0, r5
   b657e:	a90d      	add	r1, sp, #52	; 0x34
   b6580:	f7ff fe7c 	bl	b627c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b6584:	4605      	mov	r5, r0
   b6586:	a80e      	add	r0, sp, #56	; 0x38
   b6588:	f7fe fab6 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b658c:	2d00      	cmp	r5, #0
   b658e:	d0d8      	beq.n	b6542 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6590:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b6592:	6853      	ldr	r3, [r2, #4]
   b6594:	6812      	ldr	r2, [r2, #0]
   b6596:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b659a:	3b01      	subs	r3, #1
   b659c:	a80c      	add	r0, sp, #48	; 0x30
   b659e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b65a2:	f7fe faa9 	bl	b4af8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65a6:	e76b      	b.n	b6480 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b65a8:	000b7106 	.word	0x000b7106
   b65ac:	000b7023 	.word	0x000b7023
   b65b0:	000b71c2 	.word	0x000b71c2
   b65b4:	2003e704 	.word	0x2003e704
   b65b8:	002c0003 	.word	0x002c0003
   b65bc:	000b59a9 	.word	0x000b59a9
   b65c0:	000b7131 	.word	0x000b7131

000b65c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b65c4:	4802      	ldr	r0, [pc, #8]	; (b65d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b65c6:	2300      	movs	r3, #0
   b65c8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b65ca:	f7fe b8f3 	b.w	b47b4 <os_mutex_recursive_create>
   b65ce:	bf00      	nop
   b65d0:	2003e708 	.word	0x2003e708

000b65d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b65d4:	b510      	push	{r4, lr}
   b65d6:	4604      	mov	r4, r0
{
	free(buffer);
   b65d8:	6800      	ldr	r0, [r0, #0]
   b65da:	f7fe fa51 	bl	b4a80 <free>
}
   b65de:	4620      	mov	r0, r4
   b65e0:	bd10      	pop	{r4, pc}

000b65e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b65e2:	b510      	push	{r4, lr}
   b65e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b65e6:	6800      	ldr	r0, [r0, #0]
   b65e8:	b108      	cbz	r0, b65ee <_ZN6String10invalidateEv+0xc>
   b65ea:	f7fe fa49 	bl	b4a80 <free>
	buffer = NULL;
   b65ee:	2300      	movs	r3, #0
	capacity = len = 0;
   b65f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b65f4:	6023      	str	r3, [r4, #0]
}
   b65f6:	bd10      	pop	{r4, pc}

000b65f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b65f8:	b538      	push	{r3, r4, r5, lr}
   b65fa:	4604      	mov	r4, r0
   b65fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b65fe:	6800      	ldr	r0, [r0, #0]
   b6600:	3101      	adds	r1, #1
   b6602:	f7fe fa45 	bl	b4a90 <realloc>
	if (newbuffer) {
   b6606:	b110      	cbz	r0, b660e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6608:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b660c:	2001      	movs	r0, #1
	}
	return 0;
}
   b660e:	bd38      	pop	{r3, r4, r5, pc}

000b6610 <_ZN6String7reserveEj>:
{
   b6610:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6612:	6803      	ldr	r3, [r0, #0]
{
   b6614:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6616:	b123      	cbz	r3, b6622 <_ZN6String7reserveEj+0x12>
   b6618:	6843      	ldr	r3, [r0, #4]
   b661a:	428b      	cmp	r3, r1
   b661c:	d301      	bcc.n	b6622 <_ZN6String7reserveEj+0x12>
   b661e:	2001      	movs	r0, #1
}
   b6620:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6622:	4620      	mov	r0, r4
   b6624:	f7ff ffe8 	bl	b65f8 <_ZN6String12changeBufferEj>
   b6628:	2800      	cmp	r0, #0
   b662a:	d0f9      	beq.n	b6620 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b662c:	68a3      	ldr	r3, [r4, #8]
   b662e:	2b00      	cmp	r3, #0
   b6630:	d1f5      	bne.n	b661e <_ZN6String7reserveEj+0xe>
   b6632:	6822      	ldr	r2, [r4, #0]
   b6634:	7013      	strb	r3, [r2, #0]
   b6636:	e7f2      	b.n	b661e <_ZN6String7reserveEj+0xe>

000b6638 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6638:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b663a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b663c:	4611      	mov	r1, r2
   b663e:	9201      	str	r2, [sp, #4]
{
   b6640:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6642:	f7ff ffe5 	bl	b6610 <_ZN6String7reserveEj>
   b6646:	9a01      	ldr	r2, [sp, #4]
   b6648:	b928      	cbnz	r0, b6656 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b664a:	4620      	mov	r0, r4
   b664c:	f7ff ffc9 	bl	b65e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6650:	4620      	mov	r0, r4
   b6652:	b003      	add	sp, #12
   b6654:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6656:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6658:	4629      	mov	r1, r5
   b665a:	6820      	ldr	r0, [r4, #0]
   b665c:	f000 fada 	bl	b6c14 <memcpy>
	buffer[len] = 0;
   b6660:	6822      	ldr	r2, [r4, #0]
   b6662:	68a3      	ldr	r3, [r4, #8]
   b6664:	2100      	movs	r1, #0
   b6666:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6668:	e7f2      	b.n	b6650 <_ZN6String4copyEPKcj+0x18>

000b666a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b666a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b666c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b666e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6672:	4604      	mov	r4, r0
	len = 0;
   b6674:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6676:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6678:	b141      	cbz	r1, b668c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b667a:	4608      	mov	r0, r1
   b667c:	9101      	str	r1, [sp, #4]
   b667e:	f000 fb39 	bl	b6cf4 <strlen>
   b6682:	9901      	ldr	r1, [sp, #4]
   b6684:	4602      	mov	r2, r0
   b6686:	4620      	mov	r0, r4
   b6688:	f7ff ffd6 	bl	b6638 <_ZN6String4copyEPKcj>
}
   b668c:	4620      	mov	r0, r4
   b668e:	b002      	add	sp, #8
   b6690:	bd10      	pop	{r4, pc}

000b6692 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6692:	4288      	cmp	r0, r1
{
   b6694:	b510      	push	{r4, lr}
   b6696:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6698:	d005      	beq.n	b66a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b669a:	680b      	ldr	r3, [r1, #0]
   b669c:	b12b      	cbz	r3, b66aa <_ZN6StringaSERKS_+0x18>
   b669e:	688a      	ldr	r2, [r1, #8]
   b66a0:	4619      	mov	r1, r3
   b66a2:	f7ff ffc9 	bl	b6638 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b66a6:	4620      	mov	r0, r4
   b66a8:	bd10      	pop	{r4, pc}
	else invalidate();
   b66aa:	f7ff ff9a 	bl	b65e2 <_ZN6String10invalidateEv>
   b66ae:	e7fa      	b.n	b66a6 <_ZN6StringaSERKS_+0x14>

000b66b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b66b0:	b510      	push	{r4, lr}
	buffer = NULL;
   b66b2:	2300      	movs	r3, #0
String::String(const String &value)
   b66b4:	4604      	mov	r4, r0
	capacity = 0;
   b66b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b66ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   b66bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b66be:	f7ff ffe8 	bl	b6692 <_ZN6StringaSERKS_>
}
   b66c2:	4620      	mov	r0, r4
   b66c4:	bd10      	pop	{r4, pc}

000b66c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b66c6:	b513      	push	{r0, r1, r4, lr}
   b66c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b66ca:	b159      	cbz	r1, b66e4 <_ZN6StringaSEPKc+0x1e>
   b66cc:	4608      	mov	r0, r1
   b66ce:	9101      	str	r1, [sp, #4]
   b66d0:	f000 fb10 	bl	b6cf4 <strlen>
   b66d4:	9901      	ldr	r1, [sp, #4]
   b66d6:	4602      	mov	r2, r0
   b66d8:	4620      	mov	r0, r4
   b66da:	f7ff ffad 	bl	b6638 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b66de:	4620      	mov	r0, r4
   b66e0:	b002      	add	sp, #8
   b66e2:	bd10      	pop	{r4, pc}
	else invalidate();
   b66e4:	f7ff ff7d 	bl	b65e2 <_ZN6String10invalidateEv>
   b66e8:	e7f9      	b.n	b66de <_ZN6StringaSEPKc+0x18>

000b66ea <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b66ea:	b510      	push	{r4, lr}
   b66ec:	4604      	mov	r4, r0
   b66ee:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b66f0:	2300      	movs	r3, #0
	capacity = 0;
   b66f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b66f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b66f8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b66fa:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b66fc:	a901      	add	r1, sp, #4
   b66fe:	f000 f878 	bl	b67f2 <itoa>
	*this = buf;
   b6702:	a901      	add	r1, sp, #4
   b6704:	4620      	mov	r0, r4
   b6706:	f7ff ffde 	bl	b66c6 <_ZN6StringaSEPKc>
}
   b670a:	4620      	mov	r0, r4
   b670c:	b00a      	add	sp, #40	; 0x28
   b670e:	bd10      	pop	{r4, pc}

000b6710 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6710:	b570      	push	{r4, r5, r6, lr}
   b6712:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6714:	460e      	mov	r6, r1
   b6716:	b909      	cbnz	r1, b671c <_ZN6String6concatEPKcj+0xc>
   b6718:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b671a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b671c:	b16a      	cbz	r2, b673a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b671e:	6884      	ldr	r4, [r0, #8]
   b6720:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6722:	4621      	mov	r1, r4
   b6724:	f7ff ff74 	bl	b6610 <_ZN6String7reserveEj>
   b6728:	2800      	cmp	r0, #0
   b672a:	d0f5      	beq.n	b6718 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b672c:	6828      	ldr	r0, [r5, #0]
   b672e:	68ab      	ldr	r3, [r5, #8]
   b6730:	4631      	mov	r1, r6
   b6732:	4418      	add	r0, r3
   b6734:	f000 fad6 	bl	b6ce4 <strcpy>
	len = newlen;
   b6738:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b673a:	2001      	movs	r0, #1
   b673c:	e7ed      	b.n	b671a <_ZN6String6concatEPKcj+0xa>

000b673e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b673e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6740:	688a      	ldr	r2, [r1, #8]
   b6742:	6809      	ldr	r1, [r1, #0]
{
   b6744:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6746:	f7ff ffe3 	bl	b6710 <_ZN6String6concatEPKcj>
   b674a:	b910      	cbnz	r0, b6752 <_ZplRK15StringSumHelperRK6String+0x14>
   b674c:	4620      	mov	r0, r4
   b674e:	f7ff ff48 	bl	b65e2 <_ZN6String10invalidateEv>
	return a;
}
   b6752:	4620      	mov	r0, r4
   b6754:	bd10      	pop	{r4, pc}

000b6756 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b6756:	b558      	push	{r3, r4, r6, lr}
   b6758:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b675a:	b12a      	cbz	r2, b6768 <_ZNK6String8getBytesEPhjj+0x12>
   b675c:	b121      	cbz	r1, b6768 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b675e:	6884      	ldr	r4, [r0, #8]
   b6760:	42a3      	cmp	r3, r4
   b6762:	d302      	bcc.n	b676a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b6764:	2300      	movs	r3, #0
   b6766:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b6768:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b676a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b676c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b676e:	6801      	ldr	r1, [r0, #0]
   b6770:	4294      	cmp	r4, r2
   b6772:	bf28      	it	cs
   b6774:	4614      	movcs	r4, r2
   b6776:	4419      	add	r1, r3
   b6778:	4622      	mov	r2, r4
   b677a:	4630      	mov	r0, r6
   b677c:	f000 fac2 	bl	b6d04 <strncpy>
	buf[n] = 0;
   b6780:	2300      	movs	r3, #0
   b6782:	5533      	strb	r3, [r6, r4]
   b6784:	e7f0      	b.n	b6768 <_ZNK6String8getBytesEPhjj+0x12>

000b6786 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6786:	b510      	push	{r4, lr}
   b6788:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b678a:	f000 fab3 	bl	b6cf4 <strlen>
   b678e:	3801      	subs	r0, #1
   b6790:	1823      	adds	r3, r4, r0
   b6792:	4620      	mov	r0, r4
	while(i<j){
   b6794:	4283      	cmp	r3, r0
   b6796:	d906      	bls.n	b67a6 <_Z11str_reversePc+0x20>
		c = *i;
   b6798:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b679a:	7819      	ldrb	r1, [r3, #0]
   b679c:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b67a0:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b67a4:	e7f6      	b.n	b6794 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b67a6:	bd10      	pop	{r4, pc}

000b67a8 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b67a8:	b570      	push	{r4, r5, r6, lr}
   b67aa:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b67ac:	1e91      	subs	r1, r2, #2
   b67ae:	2922      	cmp	r1, #34	; 0x22
   b67b0:	d81d      	bhi.n	b67ee <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b67b2:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b67b4:	b930      	cbnz	r0, b67c4 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b67b6:	4423      	add	r3, r4
            *ptr++ = '0';
   b67b8:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b67ba:	429d      	cmp	r5, r3
   b67bc:	d210      	bcs.n	b67e0 <ultoa+0x38>
            *ptr++ = '0';
   b67be:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b67c2:	e7fa      	b.n	b67ba <ultoa+0x12>
            result.quot = a/radix;
   b67c4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b67c8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b67cc:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b67ce:	2809      	cmp	r0, #9
                *ptr += '0';
   b67d0:	bf94      	ite	ls
   b67d2:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b67d4:	3157      	addhi	r1, #87	; 0x57
   b67d6:	b2c9      	uxtb	r1, r1
   b67d8:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b67dc:	4630      	mov	r0, r6
	while(a){
   b67de:	e7e9      	b.n	b67b4 <ultoa+0xc>

	*ptr = '\0';
   b67e0:	2300      	movs	r3, #0
	str_reverse(buffer);
   b67e2:	4620      	mov	r0, r4
	*ptr = '\0';
   b67e4:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b67e6:	f7ff ffce 	bl	b6786 <_Z11str_reversePc>
	return buffer;
   b67ea:	4620      	mov	r0, r4
}
   b67ec:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b67ee:	2000      	movs	r0, #0
   b67f0:	e7fc      	b.n	b67ec <ultoa+0x44>

000b67f2 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b67f2:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b67f4:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b67f6:	460c      	mov	r4, r1
   b67f8:	4615      	mov	r5, r2
	if(a<0){
   b67fa:	da0e      	bge.n	b681a <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b67fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6800:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6804:	bf14      	ite	ne
   b6806:	4258      	negne	r0, r3
   b6808:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b680a:	2301      	movs	r3, #1
		*buffer = '-';
   b680c:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b680e:	462a      	mov	r2, r5
   b6810:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6812:	f7ff ffc9 	bl	b67a8 <ultoa>
	}
	return buffer;
}
   b6816:	4620      	mov	r0, r4
   b6818:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b681a:	2301      	movs	r3, #1
   b681c:	e7f9      	b.n	b6812 <itoa+0x20>
	...

000b6820 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6820:	4b05      	ldr	r3, [pc, #20]	; (b6838 <_GLOBAL__sub_I_System+0x18>)
   b6822:	2202      	movs	r2, #2
   b6824:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6826:	4b05      	ldr	r3, [pc, #20]	; (b683c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6828:	4a05      	ldr	r2, [pc, #20]	; (b6840 <_GLOBAL__sub_I_System+0x20>)
   b682a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b682c:	2000      	movs	r0, #0
   b682e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6832:	f7fe b8f1 	b.w	b4a18 <set_system_mode>
   b6836:	bf00      	nop
   b6838:	2003e71c 	.word	0x2003e71c
   b683c:	2003e710 	.word	0x2003e710
   b6840:	ffff0000 	.word	0xffff0000

000b6844 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6844:	2200      	movs	r2, #0
   b6846:	6840      	ldr	r0, [r0, #4]
   b6848:	4611      	mov	r1, r2
   b684a:	f7fe b8bd 	b.w	b49c8 <network_listening>

000b684e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b684e:	2200      	movs	r2, #0
   b6850:	6840      	ldr	r0, [r0, #4]
   b6852:	4611      	mov	r1, r2
   b6854:	f7fe b8c8 	b.w	b49e8 <network_get_listen_timeout>

000b6858 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6858:	6840      	ldr	r0, [r0, #4]
   b685a:	2200      	movs	r2, #0
   b685c:	f7fe b8bc 	b.w	b49d8 <network_set_listen_timeout>

000b6860 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6860:	6840      	ldr	r0, [r0, #4]
   b6862:	2200      	movs	r2, #0
   b6864:	f081 0101 	eor.w	r1, r1, #1
   b6868:	f7fe b8a6 	b.w	b49b8 <network_listen>

000b686c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b686c:	2300      	movs	r3, #0
   b686e:	6840      	ldr	r0, [r0, #4]
   b6870:	461a      	mov	r2, r3
   b6872:	4619      	mov	r1, r3
   b6874:	f7fe b898 	b.w	b49a8 <network_off>

000b6878 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6878:	2300      	movs	r3, #0
   b687a:	6840      	ldr	r0, [r0, #4]
   b687c:	461a      	mov	r2, r3
   b687e:	4619      	mov	r1, r3
   b6880:	f7fe b88a 	b.w	b4998 <network_on>

000b6884 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6884:	2200      	movs	r2, #0
   b6886:	6840      	ldr	r0, [r0, #4]
   b6888:	4611      	mov	r1, r2
   b688a:	f7fe b87d 	b.w	b4988 <network_ready>

000b688e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b688e:	2200      	movs	r2, #0
   b6890:	6840      	ldr	r0, [r0, #4]
   b6892:	4611      	mov	r1, r2
   b6894:	f7fe b868 	b.w	b4968 <network_connecting>

000b6898 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6898:	6840      	ldr	r0, [r0, #4]
   b689a:	2200      	movs	r2, #0
   b689c:	2102      	movs	r1, #2
   b689e:	f7fe b86b 	b.w	b4978 <network_disconnect>

000b68a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b68a2:	2300      	movs	r3, #0
   b68a4:	6840      	ldr	r0, [r0, #4]
   b68a6:	461a      	mov	r2, r3
   b68a8:	f7fe b856 	b.w	b4958 <network_connect>

000b68ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b68ac:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b68ae:	2203      	movs	r2, #3
   b68b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b68b2:	4a02      	ldr	r2, [pc, #8]	; (b68bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b68b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b68b6:	4770      	bx	lr
   b68b8:	2003e720 	.word	0x2003e720
   b68bc:	000b71ec 	.word	0x000b71ec

000b68c0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b68c0:	4770      	bx	lr
	...

000b68c4 <_Z17acquireWireBufferv>:
{
   b68c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b68c6:	2520      	movs	r5, #32
   b68c8:	2314      	movs	r3, #20
{
   b68ca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b68cc:	6003      	str	r3, [r0, #0]
   b68ce:	6085      	str	r5, [r0, #8]
   b68d0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b68d2:	4906      	ldr	r1, [pc, #24]	; (b68ec <_Z17acquireWireBufferv+0x28>)
   b68d4:	4628      	mov	r0, r5
   b68d6:	f000 f86f 	bl	b69b8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b68da:	4904      	ldr	r1, [pc, #16]	; (b68ec <_Z17acquireWireBufferv+0x28>)
	};
   b68dc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b68de:	4628      	mov	r0, r5
   b68e0:	f000 f86a 	bl	b69b8 <_ZnajRKSt9nothrow_t>
	};
   b68e4:	60e0      	str	r0, [r4, #12]
}
   b68e6:	4620      	mov	r0, r4
   b68e8:	bd38      	pop	{r3, r4, r5, pc}
   b68ea:	bf00      	nop
   b68ec:	000b7220 	.word	0x000b7220

000b68f0 <_Z19__fetch_global_Wirev>:
{
   b68f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b68f2:	4d0e      	ldr	r5, [pc, #56]	; (b692c <_Z19__fetch_global_Wirev+0x3c>)
   b68f4:	7829      	ldrb	r1, [r5, #0]
   b68f6:	f3bf 8f5b 	dmb	ish
   b68fa:	f011 0401 	ands.w	r4, r1, #1
{
   b68fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6900:	d111      	bne.n	b6926 <_Z19__fetch_global_Wirev+0x36>
   b6902:	4628      	mov	r0, r5
   b6904:	f7fd fbcb 	bl	b409e <__cxa_guard_acquire>
   b6908:	b168      	cbz	r0, b6926 <_Z19__fetch_global_Wirev+0x36>
   b690a:	a801      	add	r0, sp, #4
   b690c:	f7ff ffda 	bl	b68c4 <_Z17acquireWireBufferv>
   b6910:	aa01      	add	r2, sp, #4
   b6912:	4621      	mov	r1, r4
   b6914:	4806      	ldr	r0, [pc, #24]	; (b6930 <_Z19__fetch_global_Wirev+0x40>)
   b6916:	f7fe fa65 	bl	b4de4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b691a:	4628      	mov	r0, r5
   b691c:	f7fd fbc4 	bl	b40a8 <__cxa_guard_release>
   b6920:	4804      	ldr	r0, [pc, #16]	; (b6934 <_Z19__fetch_global_Wirev+0x44>)
   b6922:	f000 f961 	bl	b6be8 <atexit>
	return wire;
}
   b6926:	4802      	ldr	r0, [pc, #8]	; (b6930 <_Z19__fetch_global_Wirev+0x40>)
   b6928:	b007      	add	sp, #28
   b692a:	bd30      	pop	{r4, r5, pc}
   b692c:	2003e728 	.word	0x2003e728
   b6930:	2003e72c 	.word	0x2003e72c
   b6934:	000b68c1 	.word	0x000b68c1

000b6938 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6938:	4770      	bx	lr
	...

000b693c <_Z20acquireSerial1Bufferv>:
{
   b693c:	b538      	push	{r3, r4, r5, lr}
   b693e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6940:	2514      	movs	r5, #20
   b6942:	462a      	mov	r2, r5
   b6944:	2100      	movs	r1, #0
   b6946:	f000 f98d 	bl	b6c64 <memset>
   b694a:	8025      	strh	r5, [r4, #0]
   b694c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b694e:	4907      	ldr	r1, [pc, #28]	; (b696c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6950:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6952:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6954:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6956:	f000 f82f 	bl	b69b8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b695a:	4904      	ldr	r1, [pc, #16]	; (b696c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b695c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b695e:	4628      	mov	r0, r5
   b6960:	f000 f82a 	bl	b69b8 <_ZnajRKSt9nothrow_t>
    };
   b6964:	60e0      	str	r0, [r4, #12]
}
   b6966:	4620      	mov	r0, r4
   b6968:	bd38      	pop	{r3, r4, r5, pc}
   b696a:	bf00      	nop
   b696c:	000b7220 	.word	0x000b7220

000b6970 <_Z22__fetch_global_Serial1v>:
{
   b6970:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6972:	4d0e      	ldr	r5, [pc, #56]	; (b69ac <_Z22__fetch_global_Serial1v+0x3c>)
   b6974:	7829      	ldrb	r1, [r5, #0]
   b6976:	f3bf 8f5b 	dmb	ish
   b697a:	f011 0401 	ands.w	r4, r1, #1
{
   b697e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6980:	d111      	bne.n	b69a6 <_Z22__fetch_global_Serial1v+0x36>
   b6982:	4628      	mov	r0, r5
   b6984:	f7fd fb8b 	bl	b409e <__cxa_guard_acquire>
   b6988:	b168      	cbz	r0, b69a6 <_Z22__fetch_global_Serial1v+0x36>
   b698a:	a801      	add	r0, sp, #4
   b698c:	f7ff ffd6 	bl	b693c <_Z20acquireSerial1Bufferv>
   b6990:	aa01      	add	r2, sp, #4
   b6992:	4621      	mov	r1, r4
   b6994:	4806      	ldr	r0, [pc, #24]	; (b69b0 <_Z22__fetch_global_Serial1v+0x40>)
   b6996:	f7fe f9e5 	bl	b4d64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b699a:	4628      	mov	r0, r5
   b699c:	f7fd fb84 	bl	b40a8 <__cxa_guard_release>
   b69a0:	4804      	ldr	r0, [pc, #16]	; (b69b4 <_Z22__fetch_global_Serial1v+0x44>)
   b69a2:	f000 f921 	bl	b6be8 <atexit>
    return serial1;
}
   b69a6:	4802      	ldr	r0, [pc, #8]	; (b69b0 <_Z22__fetch_global_Serial1v+0x40>)
   b69a8:	b007      	add	sp, #28
   b69aa:	bd30      	pop	{r4, r5, pc}
   b69ac:	2003e744 	.word	0x2003e744
   b69b0:	2003e748 	.word	0x2003e748
   b69b4:	000b6939 	.word	0x000b6939

000b69b8 <_ZnajRKSt9nothrow_t>:
   b69b8:	f7fd bb6d 	b.w	b4096 <_Znaj>

000b69bc <_ZSt25__throw_bad_function_callv>:
   b69bc:	b508      	push	{r3, lr}
   b69be:	f7fe f86f 	bl	b4aa0 <abort>
	...

000b69c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b69c4:	4901      	ldr	r1, [pc, #4]	; (b69cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b69c6:	f000 b8f9 	b.w	b6bbc <_ZNKSt9type_infoeqERKS_>
   b69ca:	bf00      	nop
   b69cc:	000b723c 	.word	0x000b723c

000b69d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b69d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b69d2:	2400      	movs	r4, #0
   b69d4:	2310      	movs	r3, #16
   b69d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b69da:	6803      	ldr	r3, [r0, #0]
   b69dc:	4615      	mov	r5, r2
   b69de:	699e      	ldr	r6, [r3, #24]
   b69e0:	6812      	ldr	r2, [r2, #0]
   b69e2:	466b      	mov	r3, sp
   b69e4:	e9cd 4400 	strd	r4, r4, [sp]
   b69e8:	47b0      	blx	r6
   b69ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b69ee:	f003 0306 	and.w	r3, r3, #6
   b69f2:	2b06      	cmp	r3, #6
   b69f4:	bf03      	ittte	eq
   b69f6:	9b00      	ldreq	r3, [sp, #0]
   b69f8:	602b      	streq	r3, [r5, #0]
   b69fa:	2001      	moveq	r0, #1
   b69fc:	4620      	movne	r0, r4
   b69fe:	b004      	add	sp, #16
   b6a00:	bd70      	pop	{r4, r5, r6, pc}

000b6a02 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6a02:	9800      	ldr	r0, [sp, #0]
   b6a04:	4290      	cmp	r0, r2
   b6a06:	bf14      	ite	ne
   b6a08:	2001      	movne	r0, #1
   b6a0a:	2006      	moveq	r0, #6
   b6a0c:	4770      	bx	lr
	...

000b6a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6a10:	b510      	push	{r4, lr}
   b6a12:	4b03      	ldr	r3, [pc, #12]	; (b6a20 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6a14:	6003      	str	r3, [r0, #0]
   b6a16:	4604      	mov	r4, r0
   b6a18:	f000 f8cd 	bl	b6bb6 <_ZNSt9type_infoD1Ev>
   b6a1c:	4620      	mov	r0, r4
   b6a1e:	bd10      	pop	{r4, pc}
   b6a20:	000b727c 	.word	0x000b727c

000b6a24 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6a24:	b510      	push	{r4, lr}
   b6a26:	4604      	mov	r4, r0
   b6a28:	f7ff fff2 	bl	b6a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6a2c:	4620      	mov	r0, r4
   b6a2e:	2108      	movs	r1, #8
   b6a30:	f7fd fb33 	bl	b409a <_ZdlPvj>
   b6a34:	4620      	mov	r0, r4
   b6a36:	bd10      	pop	{r4, pc}

000b6a38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a3c:	461f      	mov	r7, r3
   b6a3e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6a42:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6a46:	4598      	cmp	r8, r3
   b6a48:	4606      	mov	r6, r0
   b6a4a:	4615      	mov	r5, r2
   b6a4c:	d107      	bne.n	b6a5e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6a4e:	9907      	ldr	r1, [sp, #28]
   b6a50:	f000 f8b4 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6a54:	b118      	cbz	r0, b6a5e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6a56:	7165      	strb	r5, [r4, #5]
   b6a58:	2000      	movs	r0, #0
   b6a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a5e:	4639      	mov	r1, r7
   b6a60:	4630      	mov	r0, r6
   b6a62:	f000 f8ab 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6a66:	2800      	cmp	r0, #0
   b6a68:	d0f6      	beq.n	b6a58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6a6a:	2301      	movs	r3, #1
   b6a6c:	f8c4 8000 	str.w	r8, [r4]
   b6a70:	7125      	strb	r5, [r4, #4]
   b6a72:	71a3      	strb	r3, [r4, #6]
   b6a74:	e7f0      	b.n	b6a58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6a76 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6a76:	b538      	push	{r3, r4, r5, lr}
   b6a78:	4615      	mov	r5, r2
   b6a7a:	461c      	mov	r4, r3
   b6a7c:	f000 f89e 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6a80:	b120      	cbz	r0, b6a8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6a82:	2308      	movs	r3, #8
   b6a84:	60e3      	str	r3, [r4, #12]
   b6a86:	2306      	movs	r3, #6
   b6a88:	6025      	str	r5, [r4, #0]
   b6a8a:	7123      	strb	r3, [r4, #4]
   b6a8c:	bd38      	pop	{r3, r4, r5, pc}

000b6a8e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a90:	4605      	mov	r5, r0
   b6a92:	460c      	mov	r4, r1
   b6a94:	9201      	str	r2, [sp, #4]
   b6a96:	461e      	mov	r6, r3
   b6a98:	f000 f890 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6a9c:	b950      	cbnz	r0, b6ab4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6a9e:	2e03      	cmp	r6, #3
   b6aa0:	d808      	bhi.n	b6ab4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6aa2:	6823      	ldr	r3, [r4, #0]
   b6aa4:	9a01      	ldr	r2, [sp, #4]
   b6aa6:	695b      	ldr	r3, [r3, #20]
   b6aa8:	4629      	mov	r1, r5
   b6aaa:	4620      	mov	r0, r4
   b6aac:	b002      	add	sp, #8
   b6aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6ab2:	4718      	bx	r3
   b6ab4:	b002      	add	sp, #8
   b6ab6:	bd70      	pop	{r4, r5, r6, pc}

000b6ab8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6ab8:	b510      	push	{r4, lr}
   b6aba:	4b03      	ldr	r3, [pc, #12]	; (b6ac8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6abc:	6003      	str	r3, [r0, #0]
   b6abe:	4604      	mov	r4, r0
   b6ac0:	f7ff ffa6 	bl	b6a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6ac4:	4620      	mov	r0, r4
   b6ac6:	bd10      	pop	{r4, pc}
   b6ac8:	000b72dc 	.word	0x000b72dc

000b6acc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6acc:	b510      	push	{r4, lr}
   b6ace:	4604      	mov	r4, r0
   b6ad0:	f7ff fff2 	bl	b6ab8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6ad4:	4620      	mov	r0, r4
   b6ad6:	210c      	movs	r1, #12
   b6ad8:	f7fd fadf 	bl	b409a <_ZdlPvj>
   b6adc:	4620      	mov	r0, r4
   b6ade:	bd10      	pop	{r4, pc}

000b6ae0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6ae2:	9f08      	ldr	r7, [sp, #32]
   b6ae4:	4297      	cmp	r7, r2
   b6ae6:	4605      	mov	r5, r0
   b6ae8:	460e      	mov	r6, r1
   b6aea:	4614      	mov	r4, r2
   b6aec:	d00a      	beq.n	b6b04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6aee:	68a8      	ldr	r0, [r5, #8]
   b6af0:	6802      	ldr	r2, [r0, #0]
   b6af2:	9708      	str	r7, [sp, #32]
   b6af4:	6a15      	ldr	r5, [r2, #32]
   b6af6:	4631      	mov	r1, r6
   b6af8:	4622      	mov	r2, r4
   b6afa:	46ac      	mov	ip, r5
   b6afc:	b003      	add	sp, #12
   b6afe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6b02:	4760      	bx	ip
   b6b04:	4619      	mov	r1, r3
   b6b06:	9301      	str	r3, [sp, #4]
   b6b08:	f000 f858 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6b0c:	9b01      	ldr	r3, [sp, #4]
   b6b0e:	2800      	cmp	r0, #0
   b6b10:	d0ed      	beq.n	b6aee <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6b12:	2006      	movs	r0, #6
   b6b14:	b003      	add	sp, #12
   b6b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6b18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6b18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b1c:	460d      	mov	r5, r1
   b6b1e:	4619      	mov	r1, r3
   b6b20:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6b24:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6b28:	4681      	mov	r9, r0
   b6b2a:	4617      	mov	r7, r2
   b6b2c:	4698      	mov	r8, r3
   b6b2e:	f000 f845 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6b32:	b190      	cbz	r0, b6b5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6b34:	2d00      	cmp	r5, #0
   b6b36:	6034      	str	r4, [r6, #0]
   b6b38:	7137      	strb	r7, [r6, #4]
   b6b3a:	db09      	blt.n	b6b50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6b3c:	1961      	adds	r1, r4, r5
   b6b3e:	458a      	cmp	sl, r1
   b6b40:	bf0c      	ite	eq
   b6b42:	2106      	moveq	r1, #6
   b6b44:	2101      	movne	r1, #1
   b6b46:	71b1      	strb	r1, [r6, #6]
   b6b48:	2000      	movs	r0, #0
   b6b4a:	b001      	add	sp, #4
   b6b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6b50:	3502      	adds	r5, #2
   b6b52:	d1f9      	bne.n	b6b48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6b54:	2301      	movs	r3, #1
   b6b56:	71b3      	strb	r3, [r6, #6]
   b6b58:	e7f6      	b.n	b6b48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6b5a:	4554      	cmp	r4, sl
   b6b5c:	d106      	bne.n	b6b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6b5e:	4659      	mov	r1, fp
   b6b60:	4648      	mov	r0, r9
   b6b62:	f000 f82b 	bl	b6bbc <_ZNKSt9type_infoeqERKS_>
   b6b66:	b108      	cbz	r0, b6b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6b68:	7177      	strb	r7, [r6, #5]
   b6b6a:	e7ed      	b.n	b6b48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6b6c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6b70:	6803      	ldr	r3, [r0, #0]
   b6b72:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6b76:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6b7a:	69dc      	ldr	r4, [r3, #28]
   b6b7c:	463a      	mov	r2, r7
   b6b7e:	4643      	mov	r3, r8
   b6b80:	4629      	mov	r1, r5
   b6b82:	46a4      	mov	ip, r4
   b6b84:	b001      	add	sp, #4
   b6b86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b8a:	4760      	bx	ip

000b6b8c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b90:	4607      	mov	r7, r0
   b6b92:	460c      	mov	r4, r1
   b6b94:	4615      	mov	r5, r2
   b6b96:	461e      	mov	r6, r3
   b6b98:	f7ff ff6d 	bl	b6a76 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6b9c:	b948      	cbnz	r0, b6bb2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6b9e:	68b8      	ldr	r0, [r7, #8]
   b6ba0:	6803      	ldr	r3, [r0, #0]
   b6ba2:	699f      	ldr	r7, [r3, #24]
   b6ba4:	462a      	mov	r2, r5
   b6ba6:	4633      	mov	r3, r6
   b6ba8:	4621      	mov	r1, r4
   b6baa:	46bc      	mov	ip, r7
   b6bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6bb0:	4760      	bx	ip
   b6bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6bb6 <_ZNSt9type_infoD1Ev>:
   b6bb6:	4770      	bx	lr

000b6bb8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6bb8:	2000      	movs	r0, #0
   b6bba:	4770      	bx	lr

000b6bbc <_ZNKSt9type_infoeqERKS_>:
   b6bbc:	4281      	cmp	r1, r0
   b6bbe:	b508      	push	{r3, lr}
   b6bc0:	d00e      	beq.n	b6be0 <_ZNKSt9type_infoeqERKS_+0x24>
   b6bc2:	6840      	ldr	r0, [r0, #4]
   b6bc4:	7803      	ldrb	r3, [r0, #0]
   b6bc6:	2b2a      	cmp	r3, #42	; 0x2a
   b6bc8:	d00c      	beq.n	b6be4 <_ZNKSt9type_infoeqERKS_+0x28>
   b6bca:	6849      	ldr	r1, [r1, #4]
   b6bcc:	780b      	ldrb	r3, [r1, #0]
   b6bce:	2b2a      	cmp	r3, #42	; 0x2a
   b6bd0:	bf08      	it	eq
   b6bd2:	3101      	addeq	r1, #1
   b6bd4:	f000 f87c 	bl	b6cd0 <strcmp>
   b6bd8:	fab0 f080 	clz	r0, r0
   b6bdc:	0940      	lsrs	r0, r0, #5
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	2001      	movs	r0, #1
   b6be2:	e7fc      	b.n	b6bde <_ZNKSt9type_infoeqERKS_+0x22>
   b6be4:	2000      	movs	r0, #0
   b6be6:	e7fa      	b.n	b6bde <_ZNKSt9type_infoeqERKS_+0x22>

000b6be8 <atexit>:
   b6be8:	2300      	movs	r3, #0
   b6bea:	4601      	mov	r1, r0
   b6bec:	461a      	mov	r2, r3
   b6bee:	4618      	mov	r0, r3
   b6bf0:	f000 b8a8 	b.w	b6d44 <__register_exitproc>

000b6bf4 <memcmp>:
   b6bf4:	b510      	push	{r4, lr}
   b6bf6:	3901      	subs	r1, #1
   b6bf8:	4402      	add	r2, r0
   b6bfa:	4290      	cmp	r0, r2
   b6bfc:	d101      	bne.n	b6c02 <memcmp+0xe>
   b6bfe:	2000      	movs	r0, #0
   b6c00:	e005      	b.n	b6c0e <memcmp+0x1a>
   b6c02:	7803      	ldrb	r3, [r0, #0]
   b6c04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6c08:	42a3      	cmp	r3, r4
   b6c0a:	d001      	beq.n	b6c10 <memcmp+0x1c>
   b6c0c:	1b18      	subs	r0, r3, r4
   b6c0e:	bd10      	pop	{r4, pc}
   b6c10:	3001      	adds	r0, #1
   b6c12:	e7f2      	b.n	b6bfa <memcmp+0x6>

000b6c14 <memcpy>:
   b6c14:	440a      	add	r2, r1
   b6c16:	4291      	cmp	r1, r2
   b6c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6c1c:	d100      	bne.n	b6c20 <memcpy+0xc>
   b6c1e:	4770      	bx	lr
   b6c20:	b510      	push	{r4, lr}
   b6c22:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c26:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6c2a:	4291      	cmp	r1, r2
   b6c2c:	d1f9      	bne.n	b6c22 <memcpy+0xe>
   b6c2e:	bd10      	pop	{r4, pc}

000b6c30 <memmove>:
   b6c30:	4288      	cmp	r0, r1
   b6c32:	b510      	push	{r4, lr}
   b6c34:	eb01 0402 	add.w	r4, r1, r2
   b6c38:	d902      	bls.n	b6c40 <memmove+0x10>
   b6c3a:	4284      	cmp	r4, r0
   b6c3c:	4623      	mov	r3, r4
   b6c3e:	d807      	bhi.n	b6c50 <memmove+0x20>
   b6c40:	1e43      	subs	r3, r0, #1
   b6c42:	42a1      	cmp	r1, r4
   b6c44:	d008      	beq.n	b6c58 <memmove+0x28>
   b6c46:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6c4e:	e7f8      	b.n	b6c42 <memmove+0x12>
   b6c50:	4402      	add	r2, r0
   b6c52:	4601      	mov	r1, r0
   b6c54:	428a      	cmp	r2, r1
   b6c56:	d100      	bne.n	b6c5a <memmove+0x2a>
   b6c58:	bd10      	pop	{r4, pc}
   b6c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6c62:	e7f7      	b.n	b6c54 <memmove+0x24>

000b6c64 <memset>:
   b6c64:	4402      	add	r2, r0
   b6c66:	4603      	mov	r3, r0
   b6c68:	4293      	cmp	r3, r2
   b6c6a:	d100      	bne.n	b6c6e <memset+0xa>
   b6c6c:	4770      	bx	lr
   b6c6e:	f803 1b01 	strb.w	r1, [r3], #1
   b6c72:	e7f9      	b.n	b6c68 <memset+0x4>

000b6c74 <srand>:
   b6c74:	b538      	push	{r3, r4, r5, lr}
   b6c76:	4b10      	ldr	r3, [pc, #64]	; (b6cb8 <srand+0x44>)
   b6c78:	681d      	ldr	r5, [r3, #0]
   b6c7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6c7c:	4604      	mov	r4, r0
   b6c7e:	b9b3      	cbnz	r3, b6cae <srand+0x3a>
   b6c80:	2018      	movs	r0, #24
   b6c82:	f7fd fef5 	bl	b4a70 <malloc>
   b6c86:	4602      	mov	r2, r0
   b6c88:	63a8      	str	r0, [r5, #56]	; 0x38
   b6c8a:	b920      	cbnz	r0, b6c96 <srand+0x22>
   b6c8c:	4b0b      	ldr	r3, [pc, #44]	; (b6cbc <srand+0x48>)
   b6c8e:	480c      	ldr	r0, [pc, #48]	; (b6cc0 <srand+0x4c>)
   b6c90:	2142      	movs	r1, #66	; 0x42
   b6c92:	f7fd ff0d 	bl	b4ab0 <__assert_func>
   b6c96:	490b      	ldr	r1, [pc, #44]	; (b6cc4 <srand+0x50>)
   b6c98:	4b0b      	ldr	r3, [pc, #44]	; (b6cc8 <srand+0x54>)
   b6c9a:	e9c0 1300 	strd	r1, r3, [r0]
   b6c9e:	4b0b      	ldr	r3, [pc, #44]	; (b6ccc <srand+0x58>)
   b6ca0:	6083      	str	r3, [r0, #8]
   b6ca2:	230b      	movs	r3, #11
   b6ca4:	8183      	strh	r3, [r0, #12]
   b6ca6:	2100      	movs	r1, #0
   b6ca8:	2001      	movs	r0, #1
   b6caa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6cae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6cb0:	2200      	movs	r2, #0
   b6cb2:	611c      	str	r4, [r3, #16]
   b6cb4:	615a      	str	r2, [r3, #20]
   b6cb6:	bd38      	pop	{r3, r4, r5, pc}
   b6cb8:	2003e5e0 	.word	0x2003e5e0
   b6cbc:	000b7315 	.word	0x000b7315
   b6cc0:	000b732c 	.word	0x000b732c
   b6cc4:	abcd330e 	.word	0xabcd330e
   b6cc8:	e66d1234 	.word	0xe66d1234
   b6ccc:	0005deec 	.word	0x0005deec

000b6cd0 <strcmp>:
   b6cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6cd8:	2a01      	cmp	r2, #1
   b6cda:	bf28      	it	cs
   b6cdc:	429a      	cmpcs	r2, r3
   b6cde:	d0f7      	beq.n	b6cd0 <strcmp>
   b6ce0:	1ad0      	subs	r0, r2, r3
   b6ce2:	4770      	bx	lr

000b6ce4 <strcpy>:
   b6ce4:	4603      	mov	r3, r0
   b6ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6cea:	f803 2b01 	strb.w	r2, [r3], #1
   b6cee:	2a00      	cmp	r2, #0
   b6cf0:	d1f9      	bne.n	b6ce6 <strcpy+0x2>
   b6cf2:	4770      	bx	lr

000b6cf4 <strlen>:
   b6cf4:	4603      	mov	r3, r0
   b6cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6cfa:	2a00      	cmp	r2, #0
   b6cfc:	d1fb      	bne.n	b6cf6 <strlen+0x2>
   b6cfe:	1a18      	subs	r0, r3, r0
   b6d00:	3801      	subs	r0, #1
   b6d02:	4770      	bx	lr

000b6d04 <strncpy>:
   b6d04:	b510      	push	{r4, lr}
   b6d06:	3901      	subs	r1, #1
   b6d08:	4603      	mov	r3, r0
   b6d0a:	b132      	cbz	r2, b6d1a <strncpy+0x16>
   b6d0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6d10:	f803 4b01 	strb.w	r4, [r3], #1
   b6d14:	3a01      	subs	r2, #1
   b6d16:	2c00      	cmp	r4, #0
   b6d18:	d1f7      	bne.n	b6d0a <strncpy+0x6>
   b6d1a:	441a      	add	r2, r3
   b6d1c:	2100      	movs	r1, #0
   b6d1e:	4293      	cmp	r3, r2
   b6d20:	d100      	bne.n	b6d24 <strncpy+0x20>
   b6d22:	bd10      	pop	{r4, pc}
   b6d24:	f803 1b01 	strb.w	r1, [r3], #1
   b6d28:	e7f9      	b.n	b6d1e <strncpy+0x1a>

000b6d2a <strnlen>:
   b6d2a:	b510      	push	{r4, lr}
   b6d2c:	4602      	mov	r2, r0
   b6d2e:	4401      	add	r1, r0
   b6d30:	428a      	cmp	r2, r1
   b6d32:	4613      	mov	r3, r2
   b6d34:	d003      	beq.n	b6d3e <strnlen+0x14>
   b6d36:	781c      	ldrb	r4, [r3, #0]
   b6d38:	3201      	adds	r2, #1
   b6d3a:	2c00      	cmp	r4, #0
   b6d3c:	d1f8      	bne.n	b6d30 <strnlen+0x6>
   b6d3e:	1a18      	subs	r0, r3, r0
   b6d40:	bd10      	pop	{r4, pc}
	...

000b6d44 <__register_exitproc>:
   b6d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e04 <__register_exitproc+0xc0>
   b6d4c:	4606      	mov	r6, r0
   b6d4e:	f8d8 0000 	ldr.w	r0, [r8]
   b6d52:	461f      	mov	r7, r3
   b6d54:	460d      	mov	r5, r1
   b6d56:	4691      	mov	r9, r2
   b6d58:	f000 f856 	bl	b6e08 <__retarget_lock_acquire_recursive>
   b6d5c:	4b25      	ldr	r3, [pc, #148]	; (b6df4 <__register_exitproc+0xb0>)
   b6d5e:	681c      	ldr	r4, [r3, #0]
   b6d60:	b934      	cbnz	r4, b6d70 <__register_exitproc+0x2c>
   b6d62:	4c25      	ldr	r4, [pc, #148]	; (b6df8 <__register_exitproc+0xb4>)
   b6d64:	601c      	str	r4, [r3, #0]
   b6d66:	4b25      	ldr	r3, [pc, #148]	; (b6dfc <__register_exitproc+0xb8>)
   b6d68:	b113      	cbz	r3, b6d70 <__register_exitproc+0x2c>
   b6d6a:	681b      	ldr	r3, [r3, #0]
   b6d6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6d70:	6863      	ldr	r3, [r4, #4]
   b6d72:	2b1f      	cmp	r3, #31
   b6d74:	dd07      	ble.n	b6d86 <__register_exitproc+0x42>
   b6d76:	f8d8 0000 	ldr.w	r0, [r8]
   b6d7a:	f000 f847 	bl	b6e0c <__retarget_lock_release_recursive>
   b6d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6d86:	b34e      	cbz	r6, b6ddc <__register_exitproc+0x98>
   b6d88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6d8c:	b988      	cbnz	r0, b6db2 <__register_exitproc+0x6e>
   b6d8e:	4b1c      	ldr	r3, [pc, #112]	; (b6e00 <__register_exitproc+0xbc>)
   b6d90:	b923      	cbnz	r3, b6d9c <__register_exitproc+0x58>
   b6d92:	f8d8 0000 	ldr.w	r0, [r8]
   b6d96:	f000 f838 	bl	b6e0a <__retarget_lock_release>
   b6d9a:	e7f0      	b.n	b6d7e <__register_exitproc+0x3a>
   b6d9c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6da0:	f7fd fe66 	bl	b4a70 <malloc>
   b6da4:	2800      	cmp	r0, #0
   b6da6:	d0f4      	beq.n	b6d92 <__register_exitproc+0x4e>
   b6da8:	2300      	movs	r3, #0
   b6daa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6dae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6db2:	6863      	ldr	r3, [r4, #4]
   b6db4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6db8:	2201      	movs	r2, #1
   b6dba:	409a      	lsls	r2, r3
   b6dbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6dc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6dc4:	4313      	orrs	r3, r2
   b6dc6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6dca:	2e02      	cmp	r6, #2
   b6dcc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6dd0:	bf02      	ittt	eq
   b6dd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6dd6:	4313      	orreq	r3, r2
   b6dd8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6ddc:	6863      	ldr	r3, [r4, #4]
   b6dde:	f8d8 0000 	ldr.w	r0, [r8]
   b6de2:	1c5a      	adds	r2, r3, #1
   b6de4:	3302      	adds	r3, #2
   b6de6:	6062      	str	r2, [r4, #4]
   b6de8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6dec:	f000 f80e 	bl	b6e0c <__retarget_lock_release_recursive>
   b6df0:	2000      	movs	r0, #0
   b6df2:	e7c6      	b.n	b6d82 <__register_exitproc+0x3e>
   b6df4:	2003e7e8 	.word	0x2003e7e8
   b6df8:	2003e75c 	.word	0x2003e75c
   b6dfc:	00000000 	.word	0x00000000
   b6e00:	000b4a71 	.word	0x000b4a71
   b6e04:	2003e644 	.word	0x2003e644

000b6e08 <__retarget_lock_acquire_recursive>:
   b6e08:	4770      	bx	lr

000b6e0a <__retarget_lock_release>:
   b6e0a:	4770      	bx	lr

000b6e0c <__retarget_lock_release_recursive>:
   b6e0c:	4770      	bx	lr

000b6e0e <link_code_end>:
	...

000b6e10 <dynalib_user>:
   b6e10:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6e20:	0000 0000 616d 6978 756d 0073 0020 4536     ....maximus. .6E
   b6e30:	3034 3030 3130 422d 4135 2d33 3346 3339     400001-B5A3-F393
   b6e40:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   b6e50:	4539 3600 3445 3030 3030 2d32 3542 3341     9E.6E400002-B5A3
   b6e60:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   b6e70:	4434 4343 3941 0045 4536 3034 3030 3330     4DCCA9E.6E400003
   b6e80:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   b6e90:	3545 4530 3432 4344 4143 4539 7400 0078     E50E24DCCA9E.tx.
   b6ea0:	7872 6400 7665 6369 2065 6f6e 2074 6f66     rx.device not fo
   b6eb0:	6e75 0064                                   und.

000b6eb4 <_ZTV9LIS3DHI2C>:
	...
   b6ebc:	43dd 000b 43df 000b 44dd 000b 4435 000b     .C...C...D..5D..
   b6ecc:	43ed 000b                                   .C..

000b6ed0 <_ZTVN5spark12NetworkClassE>:
	...
   b6ed8:	4b09 000b 4b13 000b 4b1d 000b 4b27 000b     .K...K...K..'K..
   b6ee8:	4b31 000b 4b3d 000b 4b49 000b 4b51 000b     1K..=K..IK..QK..
   b6ef8:	4b59 000b 4b65 000b 4b6d 000b 4b77 000b     YK..eK..mK..wK..
   b6f08:	4b81 000b                                   .K..

000b6f0c <_ZTVN5spark9WiFiClassE>:
	...
   b6f14:	4ccb 000b 4cc1 000b 4cb7 000b 4c6d 000b     .L...L...L..mL..
   b6f24:	4cab 000b 4c9f 000b 4b49 000b 4b51 000b     .L...L..IK..QK..
   b6f34:	4c93 000b 4c8b 000b 4c81 000b 4c77 000b     .L...L...L..wL..
   b6f44:	4b81 000b                                   .K..

000b6f48 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6f50 <_ZTV11USARTSerial>:
	...
   b6f58:	4ce9 000b 4d55 000b 4d2d 000b 5241 000b     .L..UM..-M..AR..
   b6f68:	4cfd 000b 4d19 000b 4d0b 000b 4d27 000b     .L...M...M..'M..
   b6f78:	4ceb 000b 4cef 000b                         .L...L..

000b6f80 <_ZTV7TwoWire>:
	...
   b6f88:	4d8d 000b 4dd7 000b 4daf 000b 4d8f 000b     .M...M...M...M..
   b6f98:	4db7 000b 4dbf 000b 4dc7 000b 4dcf 000b     .M...M...M...M..

000b6fa8 <_ZTV9USBSerial>:
	...
   b6fb0:	4eb1 000b 4f19 000b 4eef 000b 5241 000b     .N...O...N..AR..
   b6fc0:	4ee1 000b 4eb3 000b 4ec3 000b 4f13 000b     .N...N...N...O..
   b6fd0:	4ed3 000b 4eab 000b                         .N...N..

000b6fd8 <_ZTV9IPAddress>:
	...
   b6fe0:	4fbd 000b 4fad 000b 4faf 000b 5925 252d     .O...O...O..%Y-%
   b6ff0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b7000:	7361 7463 6d69 0065 7061 0070 7341 6573     asctime.app.Asse
   b7010:	7472 6f69 466e 6961 756c 6572 6620 6c61     rtionFailure fal
   b7020:	6573 7700 7269 6e69 2e67 6c62 0065 7453     se.wiring.ble.St
   b7030:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   b7040:	6573 7672 6369 7365 002e 7341 6573 7472     services..Assert
   b7050:	6f69 466e 6961 756c 6572 6820 6c61 625f     ionFailure hal_b
   b7060:	656c 735f 6174 6b63 695f 696e 2874 756e     le_stack_init(nu
   b7070:	6c6c 7470 2972 3d20 203d 5953 5453 4d45     llptr) == SYSTEM
   b7080:	455f 5252 524f 4e5f 4e4f 0045 6550 7265     _ERROR_NONE.Peer
   b7090:	6420 7665 6369 2065 7369 6d20 7369 6973      device is missi
   b70a0:	676e 0021 6146 6c69 6465 7420 206f 7061     ng!.Failed to ap
   b70b0:	6570 646e 7020 6565 2072 6543 746e 6172     pend peer Centra
   b70c0:	206c 6564 6976 6563 002e 6f43 6e6e 6365     l device..Connec
   b70d0:	6574 2064 7962 4320 6e65 7274 6c61 6420     ted by Central d
   b70e0:	7665 6369 2e65 4400 7369 6f63 6e6e 6365     evice..Disconnec
   b70f0:	6574 2064 7962 7220 6d65 746f 2065 6564     ted by remote de
   b7100:	6976 6563 002e 7544 6c70 6369 7461 6465     vice..Duplicated
   b7110:	6320 6168 6172 7463 7265 7369 6974 2063      characteristic 
   b7120:	6163 6e6e 746f 6220 2065 6461 6564 2e64     cannot be added.
   b7130:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   b7140:	2064 6f6c 6163 206c 6863 7261 6361 6574     d local characte
   b7150:	6972 7473 6369 002e                         ristic..

000b7158 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7160:	5305 000b 5369 000b 543d 000b 5393 000b     .S..iS..=T...S..
   b7170:	5309 000b                                   .S..

000b7174 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b717c:	5301 000b 5377 000b 5303 000b 5399 000b     .S..wS...S...S..
   b718c:	5329 000b                                   )S..

000b7190 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7198:	52ff 000b 5385 000b 5ba5 000b 539f 000b     .R...S...[...S..
   b71a8:	5349 000b 0000 0000 0000 34fb 5f9b 0080     IS.........4._..
   b71b8:	8000 1000 0000 0000 0000                    ..........

000b71c2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b71c2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b71d2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b71d2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b71e4 <_ZTVN5spark13EthernetClassE>:
	...
   b71ec:	68a3 000b 6899 000b 688f 000b 6885 000b     .h...h...h...h..
   b71fc:	6879 000b 686d 000b 4b49 000b 4b51 000b     yh..mh..IK..QK..
   b720c:	6861 000b 6859 000b 684f 000b 6845 000b     ah..Yh..Oh..Eh..
   b721c:	4b81 000b                                   .K..

000b7220 <_ZSt7nothrow>:
	...

000b7221 <_ZTSSt19_Sp_make_shared_tag>:
   b7221:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7231:	6572 5f64 6174 0067 0000                     red_tag....

000b723c <_ZTISt19_Sp_make_shared_tag>:
   b723c:	727c 000b 7221 000b                         |r..!r..

000b7244 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7244:	72dc 000b 7250 000b 7300 000b               .r..Pr...s..

000b7250 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7250:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7260:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7270:	0045 0000                                   E...

000b7274 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7274:	0000 0000 7244 000b 6a11 000b 6a25 000b     ....Dr...j..%j..
   b7284:	6bb9 000b 6bb9 000b 6a8f 000b 69d1 000b     .k...k...j...i..
   b7294:	6a77 000b 6a39 000b 6a03 000b               wj..9j...j..

000b72a0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b72a0:	72dc 000b 72ac 000b 7244 000b               .r...r..Dr..

000b72ac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b72ac:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b72bc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b72cc:	666e 456f 0000 0000                         nfoE....

000b72d4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b72d4:	0000 0000 72a0 000b 6ab9 000b 6acd 000b     .....r...j...j..
   b72e4:	6bb9 000b 6bb9 000b 6a8f 000b 69d1 000b     .k...k...j...i..
   b72f4:	6b8d 000b 6b19 000b 6ae1 000b               .k...k...j..

000b7300 <_ZTISt9type_info>:
   b7300:	727c 000b 7308 000b                         |r...s..

000b7308 <_ZTSSt9type_info>:
   b7308:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7318:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7328:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7338:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7348:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7358:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7368:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7378:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7388:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7398:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b73a9 <link_const_variable_data_end>:
   b73a9:	00          	.byte	0x00
	...

000b73ac <link_constructors_location>:
   b73ac:	000b4295 	.word	0x000b4295
   b73b0:	000b4c59 	.word	0x000b4c59
   b73b4:	000b4cd5 	.word	0x000b4cd5
   b73b8:	000b5211 	.word	0x000b5211
   b73bc:	000b521d 	.word	0x000b521d
   b73c0:	000b5231 	.word	0x000b5231
   b73c4:	000b65c5 	.word	0x000b65c5
   b73c8:	000b6821 	.word	0x000b6821
   b73cc:	000b68ad 	.word	0x000b68ad
